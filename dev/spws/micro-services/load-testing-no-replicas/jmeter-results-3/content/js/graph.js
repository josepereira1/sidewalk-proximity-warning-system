/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 133.0, "minX": 0.0, "maxY": 33534.0, "series": [{"data": [[0.0, 133.0], [0.1, 143.0], [0.2, 162.0], [0.3, 162.0], [0.4, 198.0], [0.5, 199.0], [0.6, 228.0], [0.7, 232.0], [0.8, 244.0], [0.9, 256.0], [1.0, 286.0], [1.1, 305.0], [1.2, 306.0], [1.3, 326.0], [1.4, 326.0], [1.5, 342.0], [1.6, 346.0], [1.7, 354.0], [1.8, 394.0], [1.9, 409.0], [2.0, 410.0], [2.1, 411.0], [2.2, 420.0], [2.3, 431.0], [2.4, 433.0], [2.5, 473.0], [2.6, 481.0], [2.7, 484.0], [2.8, 486.0], [2.9, 490.0], [3.0, 545.0], [3.1, 566.0], [3.2, 666.0], [3.3, 676.0], [3.4, 676.0], [3.5, 723.0], [3.6, 779.0], [3.7, 790.0], [3.8, 792.0], [3.9, 800.0], [4.0, 804.0], [4.1, 806.0], [4.2, 807.0], [4.3, 821.0], [4.4, 892.0], [4.5, 902.0], [4.6, 908.0], [4.7, 910.0], [4.8, 917.0], [4.9, 918.0], [5.0, 983.0], [5.1, 987.0], [5.2, 1009.0], [5.3, 1016.0], [5.4, 1024.0], [5.5, 1026.0], [5.6, 1027.0], [5.7, 1050.0], [5.8, 1067.0], [5.9, 1114.0], [6.0, 1116.0], [6.1, 1143.0], [6.2, 1147.0], [6.3, 1148.0], [6.4, 1166.0], [6.5, 1170.0], [6.6, 1213.0], [6.7, 1255.0], [6.8, 1263.0], [6.9, 1298.0], [7.0, 1301.0], [7.1, 1305.0], [7.2, 1319.0], [7.3, 1344.0], [7.4, 1352.0], [7.5, 1365.0], [7.6, 1369.0], [7.7, 1371.0], [7.8, 1392.0], [7.9, 1419.0], [8.0, 1428.0], [8.1, 1438.0], [8.2, 1460.0], [8.3, 1471.0], [8.4, 1491.0], [8.5, 1493.0], [8.6, 1499.0], [8.7, 1503.0], [8.8, 1504.0], [8.9, 1518.0], [9.0, 1522.0], [9.1, 1530.0], [9.2, 1546.0], [9.3, 1547.0], [9.4, 1550.0], [9.5, 1574.0], [9.6, 1575.0], [9.7, 1575.0], [9.8, 1576.0], [9.9, 1591.0], [10.0, 1592.0], [10.1, 1599.0], [10.2, 1604.0], [10.3, 1611.0], [10.4, 1631.0], [10.5, 1655.0], [10.6, 1695.0], [10.7, 1708.0], [10.8, 1713.0], [10.9, 1715.0], [11.0, 1724.0], [11.1, 1725.0], [11.2, 1728.0], [11.3, 1730.0], [11.4, 1736.0], [11.5, 1736.0], [11.6, 1739.0], [11.7, 1739.0], [11.8, 1742.0], [11.9, 1752.0], [12.0, 1762.0], [12.1, 1763.0], [12.2, 1768.0], [12.3, 1772.0], [12.4, 1772.0], [12.5, 1779.0], [12.6, 1780.0], [12.7, 1781.0], [12.8, 1786.0], [12.9, 1787.0], [13.0, 1788.0], [13.1, 1788.0], [13.2, 1791.0], [13.3, 1792.0], [13.4, 1793.0], [13.5, 1796.0], [13.6, 1798.0], [13.7, 1799.0], [13.8, 1800.0], [13.9, 1801.0], [14.0, 1805.0], [14.1, 1810.0], [14.2, 1811.0], [14.3, 1813.0], [14.4, 1814.0], [14.5, 1815.0], [14.6, 1822.0], [14.7, 1823.0], [14.8, 1825.0], [14.9, 1829.0], [15.0, 1833.0], [15.1, 1835.0], [15.2, 1837.0], [15.3, 1840.0], [15.4, 1848.0], [15.5, 1850.0], [15.6, 1852.0], [15.7, 1853.0], [15.8, 1860.0], [15.9, 1867.0], [16.0, 1876.0], [16.1, 1880.0], [16.2, 1884.0], [16.3, 1885.0], [16.4, 1886.0], [16.5, 1888.0], [16.6, 1889.0], [16.7, 1890.0], [16.8, 1892.0], [16.9, 1899.0], [17.0, 1903.0], [17.1, 1904.0], [17.2, 1905.0], [17.3, 1906.0], [17.4, 1914.0], [17.5, 1916.0], [17.6, 1923.0], [17.7, 1924.0], [17.8, 1929.0], [17.9, 1930.0], [18.0, 1932.0], [18.1, 1934.0], [18.2, 1935.0], [18.3, 1937.0], [18.4, 1939.0], [18.5, 1939.0], [18.6, 1945.0], [18.7, 1947.0], [18.8, 1950.0], [18.9, 1953.0], [19.0, 1960.0], [19.1, 1960.0], [19.2, 1962.0], [19.3, 1963.0], [19.4, 1965.0], [19.5, 1966.0], [19.6, 1968.0], [19.7, 1968.0], [19.8, 1970.0], [19.9, 1979.0], [20.0, 1980.0], [20.1, 1980.0], [20.2, 1982.0], [20.3, 1983.0], [20.4, 1986.0], [20.5, 1988.0], [20.6, 1989.0], [20.7, 1989.0], [20.8, 1991.0], [20.9, 1992.0], [21.0, 1998.0], [21.1, 2006.0], [21.2, 2009.0], [21.3, 2010.0], [21.4, 2018.0], [21.5, 2018.0], [21.6, 2019.0], [21.7, 2019.0], [21.8, 2031.0], [21.9, 2035.0], [22.0, 2036.0], [22.1, 2040.0], [22.2, 2045.0], [22.3, 2050.0], [22.4, 2051.0], [22.5, 2052.0], [22.6, 2053.0], [22.7, 2058.0], [22.8, 2058.0], [22.9, 2058.0], [23.0, 2066.0], [23.1, 2070.0], [23.2, 2074.0], [23.3, 2075.0], [23.4, 2076.0], [23.5, 2079.0], [23.6, 2082.0], [23.7, 2097.0], [23.8, 2100.0], [23.9, 2101.0], [24.0, 2112.0], [24.1, 2123.0], [24.2, 2128.0], [24.3, 2152.0], [24.4, 2156.0], [24.5, 2162.0], [24.6, 2206.0], [24.7, 2376.0], [24.8, 2387.0], [24.9, 2411.0], [25.0, 2413.0], [25.1, 2423.0], [25.2, 2424.0], [25.3, 2431.0], [25.4, 2435.0], [25.5, 2435.0], [25.6, 2444.0], [25.7, 2450.0], [25.8, 2452.0], [25.9, 2453.0], [26.0, 2462.0], [26.1, 2468.0], [26.2, 2476.0], [26.3, 2489.0], [26.4, 2496.0], [26.5, 2503.0], [26.6, 2504.0], [26.7, 2505.0], [26.8, 2506.0], [26.9, 2508.0], [27.0, 2518.0], [27.1, 2530.0], [27.2, 2533.0], [27.3, 2538.0], [27.4, 2546.0], [27.5, 2547.0], [27.6, 2548.0], [27.7, 2550.0], [27.8, 2553.0], [27.9, 2557.0], [28.0, 2564.0], [28.1, 2564.0], [28.2, 2566.0], [28.3, 2576.0], [28.4, 2577.0], [28.5, 2591.0], [28.6, 2595.0], [28.7, 2601.0], [28.8, 2611.0], [28.9, 2618.0], [29.0, 2620.0], [29.1, 2628.0], [29.2, 2632.0], [29.3, 2646.0], [29.4, 2652.0], [29.5, 2657.0], [29.6, 2672.0], [29.7, 2677.0], [29.8, 2681.0], [29.9, 2697.0], [30.0, 2706.0], [30.1, 2706.0], [30.2, 2709.0], [30.3, 2713.0], [30.4, 2723.0], [30.5, 2754.0], [30.6, 2759.0], [30.7, 2776.0], [30.8, 2779.0], [30.9, 2781.0], [31.0, 2784.0], [31.1, 2794.0], [31.2, 2797.0], [31.3, 2815.0], [31.4, 2852.0], [31.5, 2992.0], [31.6, 4539.0], [31.7, 4554.0], [31.8, 4570.0], [31.9, 4588.0], [32.0, 4781.0], [32.1, 4856.0], [32.2, 4910.0], [32.3, 4932.0], [32.4, 4949.0], [32.5, 4985.0], [32.6, 4988.0], [32.7, 4997.0], [32.8, 5014.0], [32.9, 5029.0], [33.0, 5036.0], [33.1, 5037.0], [33.2, 5057.0], [33.3, 5066.0], [33.4, 5067.0], [33.5, 5082.0], [33.6, 5088.0], [33.7, 5095.0], [33.8, 5113.0], [33.9, 5114.0], [34.0, 5115.0], [34.1, 5124.0], [34.2, 5125.0], [34.3, 5141.0], [34.4, 5144.0], [34.5, 5150.0], [34.6, 5155.0], [34.7, 5168.0], [34.8, 5178.0], [34.9, 5179.0], [35.0, 5179.0], [35.1, 5187.0], [35.2, 5188.0], [35.3, 5205.0], [35.4, 5208.0], [35.5, 5211.0], [35.6, 5212.0], [35.7, 5221.0], [35.8, 5367.0], [35.9, 6463.0], [36.0, 6477.0], [36.1, 6492.0], [36.2, 6530.0], [36.3, 6537.0], [36.4, 6558.0], [36.5, 6597.0], [36.6, 6597.0], [36.7, 6603.0], [36.8, 6613.0], [36.9, 6624.0], [37.0, 6644.0], [37.1, 6680.0], [37.2, 6681.0], [37.3, 6703.0], [37.4, 6712.0], [37.5, 6753.0], [37.6, 6781.0], [37.7, 6791.0], [37.8, 6794.0], [37.9, 6801.0], [38.0, 6805.0], [38.1, 6805.0], [38.2, 6810.0], [38.3, 6822.0], [38.4, 6826.0], [38.5, 6840.0], [38.6, 6845.0], [38.7, 6856.0], [38.8, 6865.0], [38.9, 6878.0], [39.0, 6894.0], [39.1, 6902.0], [39.2, 6907.0], [39.3, 6909.0], [39.4, 6911.0], [39.5, 6917.0], [39.6, 6918.0], [39.7, 6922.0], [39.8, 6922.0], [39.9, 6923.0], [40.0, 6925.0], [40.1, 6941.0], [40.2, 6963.0], [40.3, 6968.0], [40.4, 6987.0], [40.5, 7013.0], [40.6, 7014.0], [40.7, 7026.0], [40.8, 7028.0], [40.9, 7085.0], [41.0, 7088.0], [41.1, 7091.0], [41.2, 7108.0], [41.3, 7111.0], [41.4, 7111.0], [41.5, 7127.0], [41.6, 7128.0], [41.7, 7140.0], [41.8, 7140.0], [41.9, 7158.0], [42.0, 7164.0], [42.1, 7171.0], [42.2, 7176.0], [42.3, 7177.0], [42.4, 7185.0], [42.5, 7187.0], [42.6, 7188.0], [42.7, 7203.0], [42.8, 7217.0], [42.9, 7228.0], [43.0, 7237.0], [43.1, 7246.0], [43.2, 7252.0], [43.3, 7255.0], [43.4, 7259.0], [43.5, 7265.0], [43.6, 7266.0], [43.7, 7278.0], [43.8, 7292.0], [43.9, 7316.0], [44.0, 7317.0], [44.1, 7326.0], [44.2, 7330.0], [44.3, 7349.0], [44.4, 7350.0], [44.5, 7353.0], [44.6, 7353.0], [44.7, 7359.0], [44.8, 7359.0], [44.9, 7367.0], [45.0, 7369.0], [45.1, 7378.0], [45.2, 7382.0], [45.3, 7388.0], [45.4, 7394.0], [45.5, 7406.0], [45.6, 7408.0], [45.7, 7435.0], [45.8, 7453.0], [45.9, 7457.0], [46.0, 7458.0], [46.1, 7470.0], [46.2, 7472.0], [46.3, 7474.0], [46.4, 7479.0], [46.5, 7481.0], [46.6, 7485.0], [46.7, 7494.0], [46.8, 7502.0], [46.9, 7510.0], [47.0, 7513.0], [47.1, 7515.0], [47.2, 7590.0], [47.3, 7596.0], [47.4, 7599.0], [47.5, 7603.0], [47.6, 7616.0], [47.7, 7634.0], [47.8, 7642.0], [47.9, 7647.0], [48.0, 7668.0], [48.1, 7669.0], [48.2, 7703.0], [48.3, 7721.0], [48.4, 7724.0], [48.5, 7734.0], [48.6, 7742.0], [48.7, 7745.0], [48.8, 7748.0], [48.9, 7764.0], [49.0, 7777.0], [49.1, 7801.0], [49.2, 7804.0], [49.3, 7808.0], [49.4, 7812.0], [49.5, 7816.0], [49.6, 7817.0], [49.7, 7826.0], [49.8, 7834.0], [49.9, 7838.0], [50.0, 7839.0], [50.1, 7845.0], [50.2, 7855.0], [50.3, 7860.0], [50.4, 7861.0], [50.5, 7862.0], [50.6, 7864.0], [50.7, 7874.0], [50.8, 7876.0], [50.9, 7910.0], [51.0, 7922.0], [51.1, 7922.0], [51.2, 7924.0], [51.3, 7925.0], [51.4, 7926.0], [51.5, 7926.0], [51.6, 7939.0], [51.7, 7941.0], [51.8, 7944.0], [51.9, 7959.0], [52.0, 7965.0], [52.1, 7967.0], [52.2, 7974.0], [52.3, 7975.0], [52.4, 7978.0], [52.5, 7981.0], [52.6, 7991.0], [52.7, 7996.0], [52.8, 7998.0], [52.9, 8000.0], [53.0, 8002.0], [53.1, 8005.0], [53.2, 8014.0], [53.3, 8022.0], [53.4, 8027.0], [53.5, 8034.0], [53.6, 8035.0], [53.7, 8043.0], [53.8, 8049.0], [53.9, 8060.0], [54.0, 8065.0], [54.1, 8069.0], [54.2, 8073.0], [54.3, 8073.0], [54.4, 8075.0], [54.5, 8081.0], [54.6, 8081.0], [54.7, 8101.0], [54.8, 8112.0], [54.9, 8117.0], [55.0, 8117.0], [55.1, 8119.0], [55.2, 8119.0], [55.3, 8120.0], [55.4, 8124.0], [55.5, 8127.0], [55.6, 8127.0], [55.7, 8130.0], [55.8, 8136.0], [55.9, 8138.0], [56.0, 8143.0], [56.1, 8145.0], [56.2, 8145.0], [56.3, 8148.0], [56.4, 8153.0], [56.5, 8157.0], [56.6, 8172.0], [56.7, 8175.0], [56.8, 8186.0], [56.9, 8187.0], [57.0, 8190.0], [57.1, 8192.0], [57.2, 8202.0], [57.3, 8202.0], [57.4, 8211.0], [57.5, 8223.0], [57.6, 8227.0], [57.7, 8235.0], [57.8, 8237.0], [57.9, 8240.0], [58.0, 8266.0], [58.1, 8274.0], [58.2, 8295.0], [58.3, 8302.0], [58.4, 8303.0], [58.5, 8311.0], [58.6, 8349.0], [58.7, 8377.0], [58.8, 8384.0], [58.9, 8395.0], [59.0, 8415.0], [59.1, 8416.0], [59.2, 8424.0], [59.3, 8427.0], [59.4, 8439.0], [59.5, 8465.0], [59.6, 8517.0], [59.7, 8554.0], [59.8, 8610.0], [59.9, 8626.0], [60.0, 19494.0], [60.1, 19512.0], [60.2, 19518.0], [60.3, 19527.0], [60.4, 19549.0], [60.5, 19552.0], [60.6, 19554.0], [60.7, 19556.0], [60.8, 19561.0], [60.9, 19562.0], [61.0, 19563.0], [61.1, 19576.0], [61.2, 19581.0], [61.3, 19606.0], [61.4, 19639.0], [61.5, 19646.0], [61.6, 19659.0], [61.7, 19662.0], [61.8, 19663.0], [61.9, 19668.0], [62.0, 19692.0], [62.1, 19692.0], [62.2, 19710.0], [62.3, 19730.0], [62.4, 19731.0], [62.5, 19741.0], [62.6, 19773.0], [62.7, 19807.0], [62.8, 19823.0], [62.9, 19827.0], [63.0, 19845.0], [63.1, 19848.0], [63.2, 19851.0], [63.3, 19867.0], [63.4, 19880.0], [63.5, 19899.0], [63.6, 19915.0], [63.7, 19924.0], [63.8, 19947.0], [63.9, 19951.0], [64.0, 19958.0], [64.1, 19962.0], [64.2, 19975.0], [64.3, 19975.0], [64.4, 19979.0], [64.5, 19980.0], [64.6, 19986.0], [64.7, 19998.0], [64.8, 20000.0], [64.9, 20005.0], [65.0, 20076.0], [65.1, 20076.0], [65.2, 20086.0], [65.3, 20096.0], [65.4, 20113.0], [65.5, 20113.0], [65.6, 20116.0], [65.7, 20121.0], [65.8, 20123.0], [65.9, 20126.0], [66.0, 20185.0], [66.1, 20198.0], [66.2, 20198.0], [66.3, 20199.0], [66.4, 20199.0], [66.5, 20209.0], [66.6, 20217.0], [66.7, 20254.0], [66.8, 20276.0], [66.9, 20284.0], [67.0, 20293.0], [67.1, 20306.0], [67.2, 20307.0], [67.3, 20309.0], [67.4, 20316.0], [67.5, 20318.0], [67.6, 20329.0], [67.7, 20331.0], [67.8, 20338.0], [67.9, 20351.0], [68.0, 20354.0], [68.1, 20362.0], [68.2, 20372.0], [68.3, 20379.0], [68.4, 20382.0], [68.5, 20392.0], [68.6, 20394.0], [68.7, 20397.0], [68.8, 20422.0], [68.9, 20424.0], [69.0, 20432.0], [69.1, 20433.0], [69.2, 20439.0], [69.3, 20441.0], [69.4, 20463.0], [69.5, 20463.0], [69.6, 20468.0], [69.7, 20474.0], [69.8, 20476.0], [69.9, 20479.0], [70.0, 20493.0], [70.1, 20507.0], [70.2, 20508.0], [70.3, 20515.0], [70.4, 20523.0], [70.5, 20527.0], [70.6, 20535.0], [70.7, 20538.0], [70.8, 20539.0], [70.9, 20540.0], [71.0, 20540.0], [71.1, 20543.0], [71.2, 20544.0], [71.3, 20552.0], [71.4, 20553.0], [71.5, 20554.0], [71.6, 20560.0], [71.7, 20561.0], [71.8, 20570.0], [71.9, 20600.0], [72.0, 20616.0], [72.1, 20616.0], [72.2, 20625.0], [72.3, 20627.0], [72.4, 20651.0], [72.5, 20655.0], [72.6, 20689.0], [72.7, 20713.0], [72.8, 20714.0], [72.9, 20847.0], [73.0, 20934.0], [73.1, 20955.0], [73.2, 20967.0], [73.3, 20969.0], [73.4, 20970.0], [73.5, 20987.0], [73.6, 21027.0], [73.7, 21027.0], [73.8, 21046.0], [73.9, 21058.0], [74.0, 21080.0], [74.1, 21097.0], [74.2, 21104.0], [74.3, 21127.0], [74.4, 21127.0], [74.5, 21132.0], [74.6, 21136.0], [74.7, 21139.0], [74.8, 21141.0], [74.9, 21149.0], [75.0, 21158.0], [75.1, 21165.0], [75.2, 21171.0], [75.3, 21178.0], [75.4, 21186.0], [75.5, 21199.0], [75.6, 21202.0], [75.7, 21212.0], [75.8, 21214.0], [75.9, 21241.0], [76.0, 21254.0], [76.1, 21255.0], [76.2, 21260.0], [76.3, 21266.0], [76.4, 21272.0], [76.5, 21283.0], [76.6, 21296.0], [76.7, 21297.0], [76.8, 21298.0], [76.9, 21313.0], [77.0, 21315.0], [77.1, 21315.0], [77.2, 21317.0], [77.3, 21319.0], [77.4, 21321.0], [77.5, 21327.0], [77.6, 21336.0], [77.7, 21338.0], [77.8, 21351.0], [77.9, 21360.0], [78.0, 21360.0], [78.1, 21363.0], [78.2, 21369.0], [78.3, 21370.0], [78.4, 21377.0], [78.5, 21378.0], [78.6, 21391.0], [78.7, 21394.0], [78.8, 21396.0], [78.9, 21397.0], [79.0, 21399.0], [79.1, 21410.0], [79.2, 21411.0], [79.3, 21413.0], [79.4, 21415.0], [79.5, 21416.0], [79.6, 21419.0], [79.7, 21428.0], [79.8, 21429.0], [79.9, 21431.0], [80.0, 21433.0], [80.1, 21435.0], [80.2, 21437.0], [80.3, 21439.0], [80.4, 21448.0], [80.5, 21451.0], [80.6, 21456.0], [80.7, 21460.0], [80.8, 21460.0], [80.9, 21463.0], [81.0, 21474.0], [81.1, 21478.0], [81.2, 21478.0], [81.3, 21480.0], [81.4, 21483.0], [81.5, 21484.0], [81.6, 21485.0], [81.7, 21492.0], [81.8, 21496.0], [81.9, 21496.0], [82.0, 21499.0], [82.1, 21502.0], [82.2, 21506.0], [82.3, 21518.0], [82.4, 21520.0], [82.5, 21522.0], [82.6, 21541.0], [82.7, 21546.0], [82.8, 21548.0], [82.9, 21551.0], [83.0, 21563.0], [83.1, 21563.0], [83.2, 21564.0], [83.3, 21565.0], [83.4, 21573.0], [83.5, 21579.0], [83.6, 21592.0], [83.7, 21594.0], [83.8, 21598.0], [83.9, 21605.0], [84.0, 21618.0], [84.1, 21632.0], [84.2, 21637.0], [84.3, 21654.0], [84.4, 21659.0], [84.5, 21669.0], [84.6, 21673.0], [84.7, 21677.0], [84.8, 21680.0], [84.9, 21689.0], [85.0, 21690.0], [85.1, 21692.0], [85.2, 21712.0], [85.3, 21722.0], [85.4, 21722.0], [85.5, 21757.0], [85.6, 21803.0], [85.7, 21803.0], [85.8, 21806.0], [85.9, 21807.0], [86.0, 21826.0], [86.1, 21828.0], [86.2, 21839.0], [86.3, 21856.0], [86.4, 21873.0], [86.5, 21897.0], [86.6, 21908.0], [86.7, 21919.0], [86.8, 21920.0], [86.9, 21985.0], [87.0, 31574.0], [87.1, 31599.0], [87.2, 31623.0], [87.3, 31652.0], [87.4, 31669.0], [87.5, 31670.0], [87.6, 31693.0], [87.7, 31754.0], [87.8, 31756.0], [87.9, 31756.0], [88.0, 31778.0], [88.1, 31787.0], [88.2, 31831.0], [88.3, 31854.0], [88.4, 31873.0], [88.5, 31881.0], [88.6, 31883.0], [88.7, 31884.0], [88.8, 31888.0], [88.9, 31894.0], [89.0, 31898.0], [89.1, 31905.0], [89.2, 31958.0], [89.3, 31989.0], [89.4, 31997.0], [89.5, 32011.0], [89.6, 32070.0], [89.7, 32099.0], [89.8, 32102.0], [89.9, 32143.0], [90.0, 32160.0], [90.1, 32169.0], [90.2, 32170.0], [90.3, 32170.0], [90.4, 32194.0], [90.5, 32222.0], [90.6, 32237.0], [90.7, 32238.0], [90.8, 32285.0], [90.9, 32291.0], [91.0, 32302.0], [91.1, 32325.0], [91.2, 32326.0], [91.3, 32330.0], [91.4, 32338.0], [91.5, 32341.0], [91.6, 32342.0], [91.7, 32348.0], [91.8, 32376.0], [91.9, 32414.0], [92.0, 32420.0], [92.1, 32467.0], [92.2, 32489.0], [92.3, 32499.0], [92.4, 32506.0], [92.5, 32524.0], [92.6, 32552.0], [92.7, 32559.0], [92.8, 32566.0], [92.9, 32580.0], [93.0, 32608.0], [93.1, 32634.0], [93.2, 32643.0], [93.3, 32668.0], [93.4, 32702.0], [93.5, 32709.0], [93.6, 32732.0], [93.7, 32737.0], [93.8, 32750.0], [93.9, 32751.0], [94.0, 32763.0], [94.1, 32777.0], [94.2, 32780.0], [94.3, 32782.0], [94.4, 32791.0], [94.5, 32803.0], [94.6, 32827.0], [94.7, 32833.0], [94.8, 32852.0], [94.9, 32857.0], [95.0, 32859.0], [95.1, 32859.0], [95.2, 32864.0], [95.3, 32878.0], [95.4, 32897.0], [95.5, 32923.0], [95.6, 32930.0], [95.7, 32947.0], [95.8, 32970.0], [95.9, 32975.0], [96.0, 32988.0], [96.1, 33041.0], [96.2, 33049.0], [96.3, 33050.0], [96.4, 33087.0], [96.5, 33101.0], [96.6, 33135.0], [96.7, 33137.0], [96.8, 33143.0], [96.9, 33160.0], [97.0, 33165.0], [97.1, 33183.0], [97.2, 33233.0], [97.3, 33237.0], [97.4, 33244.0], [97.5, 33248.0], [97.6, 33272.0], [97.7, 33274.0], [97.8, 33289.0], [97.9, 33291.0], [98.0, 33324.0], [98.1, 33337.0], [98.2, 33361.0], [98.3, 33364.0], [98.4, 33369.0], [98.5, 33378.0], [98.6, 33396.0], [98.7, 33404.0], [98.8, 33408.0], [98.9, 33427.0], [99.0, 33429.0], [99.1, 33452.0], [99.2, 33462.0], [99.3, 33467.0], [99.4, 33474.0], [99.5, 33477.0], [99.6, 33482.0], [99.7, 33505.0], [99.8, 33505.0], [99.9, 33534.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 40.0, "series": [{"data": [[100.0, 6.0], [32900.0, 6.0], [33100.0, 7.0], [33300.0, 7.0], [33500.0, 3.0], [200.0, 5.0], [300.0, 7.0], [400.0, 11.0], [500.0, 2.0], [600.0, 3.0], [700.0, 4.0], [800.0, 7.0], [900.0, 7.0], [1000.0, 7.0], [1100.0, 7.0], [1200.0, 4.0], [1300.0, 9.0], [1400.0, 8.0], [1500.0, 15.0], [1600.0, 5.0], [1700.0, 31.0], [1800.0, 32.0], [1900.0, 40.0], [2000.0, 27.0], [2100.0, 8.0], [2200.0, 1.0], [2300.0, 2.0], [2400.0, 16.0], [2500.0, 22.0], [2600.0, 13.0], [2700.0, 13.0], [2800.0, 2.0], [2900.0, 1.0], [4500.0, 4.0], [4700.0, 1.0], [4800.0, 1.0], [4900.0, 6.0], [5000.0, 10.0], [5100.0, 15.0], [5200.0, 5.0], [5300.0, 1.0], [6400.0, 3.0], [6500.0, 5.0], [6600.0, 6.0], [6700.0, 6.0], [6800.0, 12.0], [6900.0, 14.0], [7000.0, 7.0], [7100.0, 15.0], [7200.0, 12.0], [7300.0, 16.0], [7400.0, 13.0], [7500.0, 7.0], [7600.0, 7.0], [7700.0, 9.0], [7800.0, 18.0], [7900.0, 20.0], [8000.0, 18.0], [8100.0, 25.0], [8200.0, 11.0], [8300.0, 7.0], [8400.0, 6.0], [8500.0, 2.0], [8600.0, 2.0], [19400.0, 1.0], [19600.0, 9.0], [19500.0, 12.0], [19700.0, 5.0], [19800.0, 9.0], [19900.0, 12.0], [20000.0, 6.0], [20100.0, 11.0], [20200.0, 6.0], [20300.0, 17.0], [20400.0, 13.0], [20700.0, 2.0], [20500.0, 18.0], [20600.0, 8.0], [20800.0, 1.0], [20900.0, 6.0], [21000.0, 6.0], [21100.0, 14.0], [21200.0, 13.0], [21300.0, 23.0], [21400.0, 30.0], [21500.0, 18.0], [21600.0, 13.0], [21700.0, 4.0], [21800.0, 10.0], [21900.0, 4.0], [31500.0, 2.0], [31600.0, 5.0], [31700.0, 5.0], [31800.0, 9.0], [31900.0, 4.0], [32000.0, 3.0], [32100.0, 7.0], [32200.0, 5.0], [32300.0, 9.0], [32400.0, 5.0], [32500.0, 6.0], [32600.0, 4.0], [32700.0, 11.0], [32800.0, 10.0], [33000.0, 4.0], [33200.0, 8.0], [33400.0, 10.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 33500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 913.0, "series": [{"data": [[0.0, 29.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 58.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 913.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 65.50769230769235, "minX": 1.59100956E12, "maxY": 509.73333333333306, "series": [{"data": [[1.59100956E12, 509.73333333333306], [1.59100962E12, 65.50769230769235]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59100962E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1491.0, "minX": 1.0, "maxY": 33534.0, "series": [{"data": [[2.0, 33474.0], [3.0, 33505.0], [4.0, 33467.0], [5.0, 33505.0], [6.0, 33462.0], [7.0, 33452.0], [8.0, 33482.0], [9.0, 33477.0], [10.0, 33427.0], [11.0, 33429.0], [12.0, 33404.0], [13.0, 33408.0], [14.0, 33396.0], [15.0, 33378.0], [16.0, 33361.0], [17.0, 33369.0], [18.0, 33364.0], [19.0, 33337.0], [20.0, 33324.0], [21.0, 33291.0], [22.0, 33289.0], [23.0, 33272.0], [24.0, 33274.0], [25.0, 33244.0], [26.0, 33248.0], [27.0, 33237.0], [28.0, 33233.0], [29.0, 33183.0], [30.0, 33165.0], [31.0, 33160.0], [33.0, 33135.0], [32.0, 33143.0], [35.0, 33101.0], [34.0, 33137.0], [37.0, 33050.0], [36.0, 33087.0], [39.0, 33041.0], [38.0, 33049.0], [41.0, 32975.0], [40.0, 32988.0], [43.0, 32947.0], [42.0, 32970.0], [45.0, 32897.0], [44.0, 32930.0], [47.0, 32878.0], [46.0, 32923.0], [49.0, 32859.0], [48.0, 32859.0], [51.0, 32857.0], [50.0, 32852.0], [53.0, 32827.0], [52.0, 32864.0], [55.0, 32803.0], [54.0, 32833.0], [57.0, 32777.0], [56.0, 32791.0], [59.0, 32782.0], [58.0, 32780.0], [60.0, 32763.0], [63.0, 32737.0], [62.0, 32750.5], [67.0, 32668.0], [66.0, 32709.0], [65.0, 32702.0], [64.0, 32732.0], [71.0, 32580.0], [70.0, 32608.0], [69.0, 32634.0], [68.0, 32643.0], [75.0, 32524.0], [74.0, 32552.0], [73.0, 32559.0], [72.0, 32566.0], [79.0, 32467.0], [78.0, 32489.0], [77.0, 32506.0], [76.0, 32499.0], [83.0, 32326.0], [82.0, 32376.0], [81.0, 32420.0], [80.0, 32414.0], [87.0, 32291.0], [86.0, 32341.0], [85.0, 32338.0], [84.0, 32348.0], [91.0, 32342.0], [90.0, 32325.0], [89.0, 32302.0], [88.0, 32330.0], [95.0, 32222.0], [94.0, 32238.0], [93.0, 32237.0], [92.0, 32285.0], [99.0, 32169.0], [98.0, 32170.0], [97.0, 32170.0], [96.0, 32194.0], [103.0, 32102.0], [102.0, 32099.0], [101.0, 32160.0], [100.0, 32143.0], [107.0, 31989.0], [106.0, 32011.0], [105.0, 31997.0], [104.0, 32070.0], [111.0, 31898.0], [110.0, 31905.0], [109.0, 31958.0], [108.0, 31881.0], [115.0, 10719.666666666666], [114.0, 31884.0], [113.0, 31888.0], [112.0, 31894.0], [119.0, 31787.0], [118.0, 31778.0], [117.0, 31854.0], [116.0, 31873.0], [120.0, 15959.0], [123.0, 31756.0], [122.0, 31754.0], [121.0, 31831.0], [127.0, 31652.0], [126.0, 31670.0], [125.0, 31669.0], [124.0, 31693.0], [131.0, 7282.0], [135.0, 21435.0], [134.0, 21437.0], [133.0, 21439.0], [132.0, 21451.0], [130.0, 31574.0], [129.0, 31599.0], [128.0, 31623.0], [137.0, 10814.5], [143.0, 21319.0], [142.0, 21297.0], [141.0, 21321.0], [140.0, 21391.0], [139.0, 21394.0], [138.0, 21419.0], [136.0, 21428.0], [146.0, 7257.666666666667], [150.0, 10755.0], [151.0, 21214.0], [149.0, 21272.0], [148.0, 21283.0], [147.0, 21296.0], [145.0, 21315.0], [144.0, 21307.0], [156.0, 10707.0], [159.0, 21132.0], [158.0, 21127.0], [157.0, 21139.0], [155.0, 21165.0], [154.0, 21171.0], [153.0, 21202.0], [152.0, 21212.0], [167.0, 21919.0], [166.0, 21027.0], [165.0, 21027.0], [164.0, 21985.0], [163.0, 21058.0], [162.0, 21080.0], [161.0, 21097.0], [160.0, 21104.0], [172.0, 10638.0], [175.0, 21873.0], [174.0, 20955.0], [173.0, 20967.0], [171.0, 21897.0], [170.0, 21908.0], [169.0, 21920.0], [168.0, 20987.0], [181.0, 11004.0], [180.0, 11056.0], [183.0, 21689.0], [182.0, 21722.0], [179.0, 21803.0], [178.0, 21826.0], [177.0, 21828.0], [176.0, 21856.0], [190.0, 21564.0], [189.0, 21594.0], [188.0, 21598.0], [187.0, 21632.0], [186.0, 21654.0], [185.0, 21677.0], [184.0, 21680.0], [193.0, 10946.0], [196.0, 10928.0], [195.0, 10944.5], [194.0, 10952.5], [199.0, 21478.0], [198.0, 21506.0], [197.0, 21496.0], [192.0, 21578.5], [207.0, 21396.0], [206.0, 21399.0], [205.0, 21429.0], [204.0, 21483.0], [203.0, 21463.0], [202.0, 21460.0], [201.0, 21460.0], [200.0, 21480.0], [215.0, 21255.0], [214.0, 21260.0], [213.0, 21317.0], [212.0, 21327.0], [211.0, 21369.0], [210.0, 21378.0], [209.0, 21363.0], [208.0, 21397.0], [223.0, 21141.0], [222.0, 21757.0], [221.0, 21149.0], [220.0, 21803.0], [219.0, 21806.0], [218.0, 21186.0], [217.0, 21241.0], [216.0, 21839.0], [225.0, 7505.0], [224.0, 7316.0], [230.0, 11039.5], [231.0, 21637.0], [229.0, 21673.0], [228.0, 21669.0], [227.0, 21692.0], [226.0, 21690.0], [237.0, 10992.0], [239.0, 21518.0], [238.0, 21548.0], [236.0, 21541.0], [235.0, 21579.0], [234.0, 21573.0], [233.0, 21605.0], [232.0, 21618.0], [247.0, 21478.0], [246.0, 21484.5], [244.0, 21492.0], [243.0, 21496.0], [242.0, 21499.0], [241.0, 21520.0], [240.0, 21522.0], [255.0, 21410.0], [254.0, 21411.0], [253.0, 21413.0], [252.0, 21416.0], [251.0, 21415.0], [250.0, 21433.0], [249.0, 21448.0], [248.0, 21474.0], [270.0, 19958.0], [257.0, 10208.5], [261.0, 15954.75], [263.0, 20667.5], [256.0, 20005.0], [267.0, 10917.5], [269.0, 10226.0], [268.0, 21338.0], [258.0, 21377.0], [266.0, 19979.0], [265.0, 19975.0], [264.0, 19980.0], [286.0, 20540.0], [274.0, 10205.0], [279.0, 10597.5], [273.0, 21315.0], [272.0, 20643.5], [278.0, 19915.0], [277.0, 20544.0], [276.0, 20713.0], [287.0, 21199.0], [285.0, 20561.0], [284.0, 19880.0], [275.0, 21298.0], [283.0, 21254.0], [282.0, 20600.0], [281.0, 20535.0], [280.0, 20507.0], [302.0, 20397.0], [303.0, 20479.0], [301.0, 20540.0], [300.0, 20538.0], [299.0, 20468.0], [298.0, 21178.0], [297.0, 20493.0], [296.0, 19823.0], [295.0, 20651.0], [289.0, 20655.0], [288.0, 20441.0], [291.0, 19845.0], [290.0, 20552.0], [294.0, 20616.0], [293.0, 20515.0], [292.0, 20527.0], [318.0, 20476.0], [319.0, 20372.0], [317.0, 20254.0], [316.0, 20474.0], [315.0, 21046.0], [314.0, 20463.0], [313.0, 20523.0], [312.0, 20351.0], [311.0, 20543.0], [305.0, 20539.0], [304.0, 21136.0], [307.0, 20422.0], [306.0, 20433.0], [310.0, 20554.0], [309.0, 20508.0], [308.0, 20553.0], [334.0, 20113.0], [321.0, 10504.0], [320.0, 10464.0], [327.0, 20969.0], [326.0, 20394.0], [325.0, 20379.0], [324.0, 20382.0], [335.0, 20318.0], [333.0, 20338.0], [332.0, 20121.0], [323.0, 20198.0], [322.0, 20392.0], [331.0, 20354.0], [330.0, 20307.0], [329.0, 20329.0], [328.0, 20934.0], [350.0, 20199.0], [351.0, 20076.0], [349.0, 20116.0], [348.0, 20096.0], [347.0, 20199.0], [346.0, 20185.0], [345.0, 20217.0], [344.0, 20847.0], [343.0, 20126.0], [337.0, 20284.0], [336.0, 20293.0], [339.0, 20331.0], [338.0, 20123.0], [342.0, 20276.0], [341.0, 20316.0], [340.0, 20309.0], [366.0, 20209.0], [367.0, 20113.0], [365.0, 20306.0], [364.0, 20439.0], [363.0, 20432.0], [362.0, 20424.0], [361.0, 19867.0], [360.0, 20560.0], [359.0, 19807.0], [353.0, 20689.0], [352.0, 20198.0], [355.0, 20086.0], [354.0, 19998.0], [358.0, 20570.0], [357.0, 20627.0], [356.0, 20625.0], [382.0, 19692.0], [383.0, 19668.0], [381.0, 19692.0], [380.0, 19662.0], [379.0, 19710.0], [378.0, 19731.0], [377.0, 19730.0], [376.0, 19741.0], [375.0, 19773.0], [369.0, 20000.0], [368.0, 20076.0], [371.0, 19899.0], [370.0, 19947.0], [374.0, 19827.0], [373.0, 19849.5], [398.0, 19562.0], [391.0, 5399.75], [385.0, 19663.0], [384.0, 19659.0], [387.0, 19646.0], [386.0, 19639.0], [399.0, 19561.0], [397.0, 19549.0], [396.0, 19556.0], [395.0, 19523.0], [393.0, 19576.0], [392.0, 19512.0], [390.0, 19606.0], [389.0, 19554.0], [388.0, 19563.0], [414.0, 7910.0], [407.0, 4350.5], [401.0, 19518.0], [400.0, 19527.0], [403.0, 8002.0], [402.0, 8022.0], [406.0, 7981.0], [405.0, 7998.0], [404.0, 8005.0], [415.0, 7864.0], [413.0, 7925.0], [412.0, 7941.0], [411.0, 7939.0], [410.0, 7959.0], [409.0, 7965.0], [408.0, 7975.0], [430.0, 8223.0], [431.0, 8235.0], [429.0, 8274.0], [428.0, 8626.0], [427.0, 8266.0], [426.0, 7724.0], [425.0, 7745.0], [424.0, 7748.0], [423.0, 7764.0], [417.0, 7855.0], [416.0, 7861.0], [419.0, 7839.0], [418.0, 7826.0], [422.0, 7777.0], [421.0, 7817.0], [420.0, 7816.0], [447.0, 4458.5], [444.0, 4430.0], [435.0, 8175.0], [434.0, 8211.0], [433.0, 8192.0], [432.0, 8227.0], [446.0, 4455.0], [445.0, 4454.5], [443.0, 8119.0], [442.0, 8130.0], [441.0, 8124.0], [440.0, 8143.0], [438.0, 8119.0], [437.0, 8153.0], [436.0, 8157.0], [462.0, 7922.0], [448.0, 4452.5], [449.0, 2636.5], [451.0, 8081.0], [450.0, 8073.0], [453.0, 4452.0], [452.0, 8075.0], [455.0, 8049.0], [454.0, 8043.0], [463.0, 7876.0], [457.0, 8027.0], [456.0, 8034.0], [461.0, 7926.0], [460.0, 7926.0], [459.0, 7974.0], [458.0, 8014.0], [478.0, 8395.0], [476.0, 4638.0], [479.0, 8349.0], [477.0, 8377.0], [475.0, 8424.0], [474.0, 8427.0], [473.0, 8439.0], [472.0, 8415.0], [471.0, 8416.0], [465.0, 7862.0], [464.0, 8610.0], [467.0, 8554.0], [466.0, 7845.0], [470.0, 8465.0], [469.0, 7703.0], [468.0, 8517.0], [494.0, 8145.0], [482.0, 2762.0], [481.0, 4606.5], [480.0, 8302.0], [487.0, 8202.0], [486.0, 8202.0], [485.0, 8237.0], [484.0, 8240.0], [483.0, 4601.5], [495.0, 8136.0], [489.0, 8186.0], [488.0, 8187.0], [493.0, 8143.0], [492.0, 8172.0], [491.0, 8127.0], [490.0, 8190.0], [510.0, 7860.0], [511.0, 7838.0], [509.0, 7924.0], [508.0, 7874.0], [507.0, 7922.0], [506.0, 7944.0], [505.0, 7991.0], [504.0, 7967.0], [503.0, 8000.0], [497.0, 8127.0], [496.0, 8145.0], [499.0, 8035.0], [498.0, 8069.0], [502.0, 7996.0], [501.0, 8060.0], [500.0, 8065.0], [541.0, 7378.0], [512.0, 4408.5], [521.0, 4342.5], [520.0, 4327.5], [528.0, 4310.0], [529.0, 7590.0], [531.0, 7515.0], [530.0, 7513.0], [533.0, 7481.0], [532.0, 7494.0], [535.0, 7474.0], [534.0, 7479.0], [527.0, 4314.5], [526.0, 4313.0], [525.0, 4312.5], [524.0, 7642.0], [523.0, 7647.0], [522.0, 7634.0], [543.0, 7353.0], [542.0, 7367.0], [540.0, 7382.0], [539.0, 7435.0], [538.0, 7458.0], [537.0, 7457.0], [536.0, 7453.0], [519.0, 7721.0], [518.0, 7742.0], [517.0, 7734.0], [516.0, 7804.0], [515.0, 7801.0], [514.0, 7808.0], [513.0, 7812.0], [548.0, 3127.6666666666665], [574.0, 7510.0], [559.0, 7140.0], [545.0, 7350.0], [544.0, 7317.0], [547.0, 7330.0], [546.0, 7349.0], [558.0, 7171.0], [557.0, 7164.0], [556.0, 7185.0], [555.0, 7187.0], [554.0, 7203.0], [553.0, 7228.0], [552.0, 7252.0], [568.0, 6963.0], [551.0, 7217.0], [550.0, 7255.0], [549.0, 7292.0], [563.0, 4111.0], [565.0, 7028.0], [564.0, 7088.0], [567.0, 6968.0], [566.0, 7014.0], [562.0, 4100.5], [569.0, 4036.5], [575.0, 4324.5], [561.0, 7091.0], [560.0, 7128.0], [573.0, 6894.0], [572.0, 6907.0], [571.0, 6919.5], [605.0, 7013.0], [576.0, 4314.0], [577.0, 6856.0], [591.0, 7278.0], [590.0, 7316.0], [589.0, 7359.0], [588.0, 7326.0], [587.0, 7369.0], [586.0, 7353.0], [585.0, 7388.0], [584.0, 7359.0], [578.0, 4007.5], [583.0, 4280.0], [582.0, 7408.0], [581.0, 7406.0], [580.0, 7470.0], [579.0, 7472.0], [600.0, 7140.0], [602.0, 7111.0], [601.0, 7127.0], [596.0, 4194.5], [595.0, 7237.0], [594.0, 7259.0], [593.0, 7246.0], [592.0, 7265.0], [597.0, 7188.0], [599.0, 7158.0], [598.0, 7177.0], [607.0, 6941.0], [606.0, 6987.0], [604.0, 7026.0], [603.0, 7111.0], [636.0, 6597.0], [611.0, 4083.0], [608.0, 4092.5], [610.0, 6918.0], [609.0, 6923.0], [613.0, 4100.0], [612.0, 6909.0], [615.0, 6865.0], [614.0, 6878.0], [633.0, 6613.0], [632.0, 6624.0], [635.0, 6603.0], [634.0, 6597.0], [617.0, 3148.666666666667], [616.0, 6822.0], [618.0, 6805.0], [620.0, 6826.0], [619.0, 6805.0], [622.0, 6810.0], [621.0, 6801.0], [623.0, 4055.0], [639.0, 6537.0], [625.0, 6781.0], [624.0, 6794.0], [627.0, 6712.0], [626.0, 6753.0], [629.0, 6680.0], [628.0, 6703.0], [631.0, 6644.0], [630.0, 6681.0], [638.0, 6530.0], [637.0, 6558.0], [665.0, 3218.0], [640.0, 3062.666666666667], [642.0, 6463.0], [641.0, 6477.0], [655.0, 5208.0], [654.0, 5080.5], [652.0, 4910.0], [651.0, 5037.0], [650.0, 5141.0], [649.0, 5211.0], [648.0, 5144.0], [644.0, 3866.0], [664.0, 3272.0], [647.0, 5188.0], [646.0, 5273.0], [671.0, 5036.0], [657.0, 5205.0], [656.0, 5221.0], [659.0, 5124.0], [658.0, 5095.0], [661.0, 5082.0], [660.0, 5088.0], [663.0, 5187.0], [662.0, 5066.0], [670.0, 5178.0], [669.0, 4856.0], [668.0, 5155.0], [667.0, 5057.0], [666.0, 5168.0], [701.0, 2632.0], [682.0, 3013.0], [681.0, 4932.0], [680.0, 4988.0], [684.0, 4539.0], [683.0, 4554.0], [686.0, 2431.0], [685.0, 4570.0], [696.0, 2504.0], [679.0, 4985.0], [678.0, 4781.0], [677.0, 5014.0], [676.0, 4997.0], [675.0, 5115.0], [674.0, 5137.5], [672.0, 5029.0], [687.0, 2411.0], [695.0, 2066.0], [694.0, 2413.0], [693.0, 2550.0], [692.0, 2450.0], [691.0, 2496.0], [690.0, 2376.0], [689.0, 2591.0], [688.0, 2387.0], [703.0, 2462.0], [702.0, 2547.0], [700.0, 2476.0], [699.0, 2505.0], [698.0, 2435.0], [697.0, 2503.0], [709.0, 2027.5], [732.0, 1491.0], [706.0, 1775.3333333333333], [705.0, 2759.0], [704.0, 2444.0], [708.0, 2423.0], [707.0, 2557.0], [719.0, 2601.0], [718.0, 2620.0], [717.0, 2628.0], [716.0, 2538.0], [715.0, 2652.0], [714.0, 2657.0], [713.0, 2677.0], [712.0, 2576.0], [711.0, 2034.0], [710.0, 2533.0], [729.0, 2611.0], [728.0, 2435.0], [731.0, 1888.0], [730.0, 2424.0], [724.0, 2009.5], [727.0, 1961.5], [726.0, 2453.0], [725.0, 2468.0], [735.0, 2564.0], [721.0, 2709.0], [720.0, 2530.0], [723.0, 2508.0], [722.0, 2697.0], [734.0, 2794.0], [733.0, 2678.0], [761.0, 1673.5], [744.0, 2104.5], [746.0, 2114.0], [748.0, 1850.0], [747.0, 1880.0], [750.0, 1792.0], [749.0, 1788.0], [760.0, 2781.0], [743.0, 1823.0], [742.0, 2518.0], [741.0, 2646.0], [740.0, 2553.0], [739.0, 2546.0], [738.0, 2618.0], [737.0, 2548.0], [736.0, 2566.0], [751.0, 1772.0], [745.0, 1590.6666666666667], [753.0, 1630.5], [754.0, 1666.0], [755.0, 1800.0], [757.0, 1788.0], [756.0, 1799.0], [759.0, 1815.0], [758.0, 2797.0], [767.0, 2672.0], [752.0, 1829.0], [766.0, 2852.0], [765.0, 2776.0], [764.0, 2723.0], [763.0, 1825.0], [762.0, 1793.0], [794.0, 2784.0], [770.0, 1644.5], [769.0, 1740.5], [768.0, 1798.0], [784.0, 2283.0], [783.0, 1668.0], [782.0, 1744.0], [781.0, 1640.0], [780.0, 1822.0], [779.0, 1787.0], [778.0, 1914.0], [777.0, 2123.0], [776.0, 1884.0], [785.0, 1801.0], [787.0, 1810.0], [786.0, 2070.0], [789.0, 1937.0], [788.0, 1840.0], [791.0, 1982.0], [790.0, 1992.0], [792.0, 1798.0], [775.0, 1950.0], [774.0, 1890.0], [773.0, 1708.0], [772.0, 1796.0], [771.0, 1837.0], [793.0, 1962.0], [795.0, 1779.0], [797.0, 1768.0], [796.0, 2815.0], [799.0, 2018.0], [798.0, 1715.0], [827.0, 1998.0], [802.0, 2204.5], [815.0, 1930.0], [801.0, 2347.0], [814.0, 1924.0], [813.0, 2074.0], [812.0, 1876.0], [811.0, 1953.0], [810.0, 2019.0], [809.0, 2018.0], [808.0, 1904.0], [831.0, 2050.0], [817.0, 2031.0], [816.0, 2156.0], [819.0, 2082.0], [818.0, 2162.0], [821.0, 2100.0], [820.0, 1916.0], [830.0, 1979.5], [828.0, 1923.0], [826.0, 1934.0], [825.0, 1947.0], [824.0, 2075.0], [807.0, 2006.0], [806.0, 1968.0], [805.0, 1899.0], [804.0, 1852.0], [803.0, 1905.0], [823.0, 2112.0], [822.0, 2097.0], [861.0, 1945.0], [837.0, 1911.5], [847.0, 2066.0], [832.0, 1966.0], [834.0, 2058.0], [833.0, 2206.0], [836.0, 1986.0], [835.0, 2045.0], [846.0, 2036.0], [845.0, 1980.0], [844.0, 2035.0], [843.0, 2152.0], [842.0, 1885.0], [841.0, 2058.0], [840.0, 2076.0], [856.0, 2010.0], [839.0, 2058.0], [838.0, 2101.0], [850.0, 1882.0], [849.0, 2052.0], [848.0, 1960.0], [851.0, 2079.0], [853.0, 1983.0], [852.0, 1970.0], [855.0, 2019.0], [854.0, 2040.0], [863.0, 1935.0], [862.0, 1963.0], [860.0, 1960.0], [859.0, 1989.0], [858.0, 1989.0], [857.0, 2009.0], [870.0, 1767.75], [884.0, 1762.0], [869.0, 1810.0], [868.0, 1906.0], [867.0, 1929.0], [866.0, 1939.0], [865.0, 1932.0], [864.0, 1939.0], [879.0, 1781.0], [878.0, 1811.0], [877.0, 1813.0], [876.0, 1848.0], [875.0, 1833.0], [874.0, 1835.0], [873.0, 1860.0], [872.0, 1867.0], [871.0, 1822.5], [881.0, 1791.0], [880.0, 1786.0], [887.0, 1736.0], [886.0, 1772.0], [885.0, 1752.0], [883.0, 1763.0], [882.0, 1805.0], [1.0, 33534.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[451.9839999999997, 12478.384000000002]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 887.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 435.5, "minX": 1.59100956E12, "maxY": 3741.0, "series": [{"data": [[1.59100956E12, 2914.5], [1.59100962E12, 435.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59100956E12, 3741.0], [1.59100962E12, 559.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59100962E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9466.88505747127, "minX": 1.59100956E12, "maxY": 32632.261538461542, "series": [{"data": [[1.59100956E12, 9466.88505747127], [1.59100962E12, 32632.261538461542]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59100962E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9466.83448275862, "minX": 1.59100956E12, "maxY": 32632.223076923077, "series": [{"data": [[1.59100956E12, 9466.83448275862], [1.59100962E12, 32632.223076923077]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59100962E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6692307692307695, "minX": 1.59100956E12, "maxY": 3.3942528735632207, "series": [{"data": [[1.59100956E12, 3.3942528735632207], [1.59100962E12, 0.6692307692307695]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59100962E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 133.0, "minX": 1.59100956E12, "maxY": 33534.0, "series": [{"data": [[1.59100956E12, 21985.0], [1.59100962E12, 33534.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59100956E12, 231.35599916934967], [1.59100962E12, 31578.47499921918]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59100956E12, 239.4748009967804], [1.59100962E12, 31581.42250031233]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59100956E12, 235.2939987540245], [1.59100962E12, 31580.11249960959]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59100956E12, 133.0], [1.59100962E12, 31574.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59100956E12, 7265.5], [1.59100962E12, 32705.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59100962E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 394.0, "minX": 11.0, "maxY": 33428.0, "series": [{"data": [[32.0, 5074.5], [35.0, 394.0], [36.0, 19662.5], [11.0, 5141.0], [46.0, 21296.5], [50.0, 2531.5], [13.0, 7975.0], [70.0, 1299.5], [69.0, 6918.0], [76.0, 7466.0], [80.0, 1942.0], [83.0, 20362.5], [20.0, 33428.0], [91.0, 20433.0], [98.0, 21481.5], [27.0, 31854.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 98.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 394.0, "minX": 11.0, "maxY": 33428.0, "series": [{"data": [[32.0, 5074.5], [35.0, 394.0], [36.0, 19662.5], [11.0, 5141.0], [46.0, 21296.5], [50.0, 2531.5], [13.0, 7975.0], [70.0, 1299.5], [69.0, 6918.0], [76.0, 7465.5], [80.0, 1942.0], [83.0, 20362.5], [20.0, 33428.0], [91.0, 20433.0], [98.0, 21481.5], [27.0, 31854.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 98.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.59100956E12, "maxY": 16.666666666666668, "series": [{"data": [[1.59100956E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59100956E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.1666666666666665, "minX": 1.59100956E12, "maxY": 14.5, "series": [{"data": [[1.59100956E12, 14.5], [1.59100962E12, 2.1666666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59100962E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.1666666666666665, "minX": 1.59100956E12, "maxY": 14.5, "series": [{"data": [[1.59100956E12, 14.5], [1.59100962E12, 2.1666666666666665]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59100962E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.1666666666666665, "minX": 1.59100956E12, "maxY": 14.5, "series": [{"data": [[1.59100956E12, 14.5], [1.59100962E12, 2.1666666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59100962E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

