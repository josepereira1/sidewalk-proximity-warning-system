PUBLIC_KEY = File.read(File.expand_path("~/.ssh/id_rsa.pub")).strip

# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/xenial64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "10.0.0.101"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  # Display the VirtualBox GUI when booting the machine
  # b.gui = true
  #
  # Customize the amount of memory on the VM:
    vb.memory = "512"
    vb.cpus = "1"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  config.vm.define "vm1" do |vm1|
    vm1.vm.network "private_network", ip: "10.0.0.101"
    vm1.vm.hostname = "vm1"

    # portfoward para todas as VMs (pois qualquer uma pode expor qualquer micro-servi√ßo)
    vm1.vm.network "forwarded_port", guest: 2377, host: 2377 # docker swarm management port (para poder dar join)
    vm1.vm.network "forwarded_port", guest: 5000, host: 5000 # micro-service CRUD-pedestrian port
    vm1.vm.network "forwarded_port", guest: 5001, host: 5001 # micro-service CRUD-vehicle port
    vm1.vm.network "forwarded_port", guest: 5002, host: 5002 # micro-service CRUD-crosswalk-location port
    vm1.vm.network "forwarded_port", guest: 6379, host: 6379 # redis port
  end

  config.vm.define "vm2" do |vm2|
    vm2.vm.network "private_network", ip: "10.0.0.102"
    vm2.vm.hostname = "vm2"

  end

  config.vm.define "vm3" do |vm3|
    vm3.vm.network "private_network", ip: "10.0.0.103"
    vm3.vm.hostname = "vm3"

  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.

  config.vm.provision "shell", inline: <<-SHELL
    apt-get -y update
  	apt-get -y upgrade 
  	apt-get -y autoremove 
  	apt-get install -y vim
    echo "#{PUBLIC_KEY}" >> /home/vagrant/.ssh/authorized_keys

    sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo apt-key fingerprint 0EBFCD88
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    sudo apt-get -y update
    sudo apt-get -y install docker-ce
    sudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-` uname -m` -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose

    rm -r -f ew/
    mkdir ew/
    mkdir ew/docker_images/
    chmod 777 -R ew/

  SHELL

end
