/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 140.0, "minX": 0.0, "maxY": 8178.0, "series": [{"data": [[0.0, 140.0], [0.1, 164.0], [0.2, 186.0], [0.3, 186.0], [0.4, 215.0], [0.5, 230.0], [0.6, 231.0], [0.7, 232.0], [0.8, 233.0], [0.9, 237.0], [1.0, 256.0], [1.1, 268.0], [1.2, 274.0], [1.3, 275.0], [1.4, 275.0], [1.5, 307.0], [1.6, 324.0], [1.7, 360.0], [1.8, 361.0], [1.9, 413.0], [2.0, 418.0], [2.1, 419.0], [2.2, 428.0], [2.3, 429.0], [2.4, 429.0], [2.5, 431.0], [2.6, 432.0], [2.7, 435.0], [2.8, 448.0], [2.9, 454.0], [3.0, 454.0], [3.1, 456.0], [3.2, 465.0], [3.3, 482.0], [3.4, 499.0], [3.5, 504.0], [3.6, 505.0], [3.7, 510.0], [3.8, 514.0], [3.9, 553.0], [4.0, 559.0], [4.1, 562.0], [4.2, 567.0], [4.3, 568.0], [4.4, 603.0], [4.5, 612.0], [4.6, 615.0], [4.7, 619.0], [4.8, 620.0], [4.9, 623.0], [5.0, 624.0], [5.1, 633.0], [5.2, 633.0], [5.3, 639.0], [5.4, 655.0], [5.5, 660.0], [5.6, 682.0], [5.7, 688.0], [5.8, 703.0], [5.9, 703.0], [6.0, 711.0], [6.1, 721.0], [6.2, 727.0], [6.3, 738.0], [6.4, 756.0], [6.5, 758.0], [6.6, 771.0], [6.7, 798.0], [6.8, 803.0], [6.9, 806.0], [7.0, 806.0], [7.1, 815.0], [7.2, 820.0], [7.3, 836.0], [7.4, 836.0], [7.5, 846.0], [7.6, 858.0], [7.7, 867.0], [7.8, 869.0], [7.9, 870.0], [8.0, 879.0], [8.1, 885.0], [8.2, 889.0], [8.3, 891.0], [8.4, 893.0], [8.5, 893.0], [8.6, 894.0], [8.7, 903.0], [8.8, 906.0], [8.9, 909.0], [9.0, 916.0], [9.1, 919.0], [9.2, 927.0], [9.3, 928.0], [9.4, 931.0], [9.5, 937.0], [9.6, 937.0], [9.7, 937.0], [9.8, 941.0], [9.9, 946.0], [10.0, 947.0], [10.1, 962.0], [10.2, 978.0], [10.3, 987.0], [10.4, 989.0], [10.5, 997.0], [10.6, 1009.0], [10.7, 1011.0], [10.8, 1053.0], [10.9, 1054.0], [11.0, 1055.0], [11.1, 1056.0], [11.2, 1073.0], [11.3, 1082.0], [11.4, 1087.0], [11.5, 1089.0], [11.6, 1090.0], [11.7, 1093.0], [11.8, 1097.0], [11.9, 1098.0], [12.0, 1101.0], [12.1, 1102.0], [12.2, 1106.0], [12.3, 1119.0], [12.4, 1123.0], [12.5, 1127.0], [12.6, 1129.0], [12.7, 1139.0], [12.8, 1147.0], [12.9, 1150.0], [13.0, 1151.0], [13.1, 1158.0], [13.2, 1158.0], [13.3, 1166.0], [13.4, 1173.0], [13.5, 1180.0], [13.6, 1189.0], [13.7, 1192.0], [13.8, 1197.0], [13.9, 1197.0], [14.0, 1201.0], [14.1, 1204.0], [14.2, 1209.0], [14.3, 1215.0], [14.4, 1226.0], [14.5, 1239.0], [14.6, 1240.0], [14.7, 1247.0], [14.8, 1247.0], [14.9, 1250.0], [15.0, 1253.0], [15.1, 1257.0], [15.2, 1261.0], [15.3, 1272.0], [15.4, 1276.0], [15.5, 1291.0], [15.6, 1301.0], [15.7, 1313.0], [15.8, 1326.0], [15.9, 1337.0], [16.0, 1340.0], [16.1, 1346.0], [16.2, 1360.0], [16.3, 1360.0], [16.4, 1367.0], [16.5, 1378.0], [16.6, 1381.0], [16.7, 1384.0], [16.8, 1386.0], [16.9, 1389.0], [17.0, 1405.0], [17.1, 1424.0], [17.2, 1436.0], [17.3, 1444.0], [17.4, 1446.0], [17.5, 1451.0], [17.6, 1466.0], [17.7, 1468.0], [17.8, 1477.0], [17.9, 1479.0], [18.0, 1480.0], [18.1, 1492.0], [18.2, 1498.0], [18.3, 1498.0], [18.4, 1499.0], [18.5, 1508.0], [18.6, 1515.0], [18.7, 1519.0], [18.8, 1523.0], [18.9, 1523.0], [19.0, 1525.0], [19.1, 1525.0], [19.2, 1527.0], [19.3, 1530.0], [19.4, 1532.0], [19.5, 1539.0], [19.6, 1539.0], [19.7, 1542.0], [19.8, 1542.0], [19.9, 1548.0], [20.0, 1560.0], [20.1, 1574.0], [20.2, 1574.0], [20.3, 1582.0], [20.4, 1603.0], [20.5, 1606.0], [20.6, 1611.0], [20.7, 1629.0], [20.8, 1630.0], [20.9, 1633.0], [21.0, 1665.0], [21.1, 1665.0], [21.2, 1671.0], [21.3, 1692.0], [21.4, 1708.0], [21.5, 1712.0], [21.6, 1713.0], [21.7, 1729.0], [21.8, 1740.0], [21.9, 1745.0], [22.0, 1746.0], [22.1, 1746.0], [22.2, 1749.0], [22.3, 1751.0], [22.4, 1754.0], [22.5, 1755.0], [22.6, 1777.0], [22.7, 1779.0], [22.8, 1787.0], [22.9, 1790.0], [23.0, 1790.0], [23.1, 1792.0], [23.2, 1796.0], [23.3, 1807.0], [23.4, 1812.0], [23.5, 1813.0], [23.6, 1830.0], [23.7, 1831.0], [23.8, 1844.0], [23.9, 1856.0], [24.0, 1856.0], [24.1, 1870.0], [24.2, 1874.0], [24.3, 1874.0], [24.4, 1876.0], [24.5, 1879.0], [24.6, 1885.0], [24.7, 1894.0], [24.8, 1901.0], [24.9, 1909.0], [25.0, 1910.0], [25.1, 1914.0], [25.2, 1918.0], [25.3, 1927.0], [25.4, 1928.0], [25.5, 1931.0], [25.6, 1933.0], [25.7, 1944.0], [25.8, 1953.0], [25.9, 1965.0], [26.0, 1968.0], [26.1, 1976.0], [26.2, 1985.0], [26.3, 1987.0], [26.4, 1988.0], [26.5, 1989.0], [26.6, 1996.0], [26.7, 1997.0], [26.8, 1999.0], [26.9, 2004.0], [27.0, 2005.0], [27.1, 2017.0], [27.2, 2018.0], [27.3, 2029.0], [27.4, 2050.0], [27.5, 2066.0], [27.6, 2067.0], [27.7, 2071.0], [27.8, 2073.0], [27.9, 2087.0], [28.0, 2091.0], [28.1, 2091.0], [28.2, 2094.0], [28.3, 2096.0], [28.4, 2114.0], [28.5, 2120.0], [28.6, 2125.0], [28.7, 2130.0], [28.8, 2131.0], [28.9, 2131.0], [29.0, 2140.0], [29.1, 2144.0], [29.2, 2147.0], [29.3, 2150.0], [29.4, 2152.0], [29.5, 2154.0], [29.6, 2154.0], [29.7, 2155.0], [29.8, 2159.0], [29.9, 2162.0], [30.0, 2163.0], [30.1, 2165.0], [30.2, 2165.0], [30.3, 2165.0], [30.4, 2169.0], [30.5, 2174.0], [30.6, 2175.0], [30.7, 2179.0], [30.8, 2184.0], [30.9, 2185.0], [31.0, 2190.0], [31.1, 2191.0], [31.2, 2198.0], [31.3, 2198.0], [31.4, 2198.0], [31.5, 2201.0], [31.6, 2203.0], [31.7, 2203.0], [31.8, 2206.0], [31.9, 2209.0], [32.0, 2210.0], [32.1, 2210.0], [32.2, 2210.0], [32.3, 2217.0], [32.4, 2218.0], [32.5, 2223.0], [32.6, 2224.0], [32.7, 2224.0], [32.8, 2227.0], [32.9, 2227.0], [33.0, 2227.0], [33.1, 2230.0], [33.2, 2231.0], [33.3, 2232.0], [33.4, 2236.0], [33.5, 2239.0], [33.6, 2240.0], [33.7, 2240.0], [33.8, 2241.0], [33.9, 2243.0], [34.0, 2243.0], [34.1, 2244.0], [34.2, 2245.0], [34.3, 2247.0], [34.4, 2249.0], [34.5, 2252.0], [34.6, 2255.0], [34.7, 2257.0], [34.8, 2262.0], [34.9, 2264.0], [35.0, 2265.0], [35.1, 2266.0], [35.2, 2270.0], [35.3, 2270.0], [35.4, 2272.0], [35.5, 2272.0], [35.6, 2273.0], [35.7, 2273.0], [35.8, 2274.0], [35.9, 2279.0], [36.0, 2279.0], [36.1, 2283.0], [36.2, 2284.0], [36.3, 2284.0], [36.4, 2285.0], [36.5, 2286.0], [36.6, 2289.0], [36.7, 2289.0], [36.8, 2291.0], [36.9, 2293.0], [37.0, 2293.0], [37.1, 2294.0], [37.2, 2296.0], [37.3, 2298.0], [37.4, 2299.0], [37.5, 2303.0], [37.6, 2306.0], [37.7, 2306.0], [37.8, 2307.0], [37.9, 2307.0], [38.0, 2311.0], [38.1, 2313.0], [38.2, 2313.0], [38.3, 2315.0], [38.4, 2316.0], [38.5, 2317.0], [38.6, 2320.0], [38.7, 2323.0], [38.8, 2323.0], [38.9, 2324.0], [39.0, 2326.0], [39.1, 2330.0], [39.2, 2340.0], [39.3, 2341.0], [39.4, 2342.0], [39.5, 2343.0], [39.6, 2347.0], [39.7, 2349.0], [39.8, 2351.0], [39.9, 2351.0], [40.0, 2353.0], [40.1, 2354.0], [40.2, 2355.0], [40.3, 2360.0], [40.4, 2361.0], [40.5, 2361.0], [40.6, 2363.0], [40.7, 2366.0], [40.8, 2367.0], [40.9, 2368.0], [41.0, 2369.0], [41.1, 2370.0], [41.2, 2371.0], [41.3, 2373.0], [41.4, 2374.0], [41.5, 2374.0], [41.6, 2377.0], [41.7, 2378.0], [41.8, 2378.0], [41.9, 2379.0], [42.0, 2382.0], [42.1, 2383.0], [42.2, 2385.0], [42.3, 2385.0], [42.4, 2386.0], [42.5, 2388.0], [42.6, 2391.0], [42.7, 2392.0], [42.8, 2392.0], [42.9, 2395.0], [43.0, 2396.0], [43.1, 2397.0], [43.2, 2399.0], [43.3, 2400.0], [43.4, 2400.0], [43.5, 2402.0], [43.6, 2404.0], [43.7, 2407.0], [43.8, 2407.0], [43.9, 2408.0], [44.0, 2408.0], [44.1, 2408.0], [44.2, 2410.0], [44.3, 2413.0], [44.4, 2416.0], [44.5, 2416.0], [44.6, 2418.0], [44.7, 2419.0], [44.8, 2422.0], [44.9, 2423.0], [45.0, 2423.0], [45.1, 2424.0], [45.2, 2424.0], [45.3, 2426.0], [45.4, 2428.0], [45.5, 2429.0], [45.6, 2429.0], [45.7, 2432.0], [45.8, 2435.0], [45.9, 2435.0], [46.0, 2435.0], [46.1, 2435.0], [46.2, 2438.0], [46.3, 2438.0], [46.4, 2448.0], [46.5, 2449.0], [46.6, 2450.0], [46.7, 2451.0], [46.8, 2453.0], [46.9, 2454.0], [47.0, 2455.0], [47.1, 2456.0], [47.2, 2457.0], [47.3, 2459.0], [47.4, 2464.0], [47.5, 2464.0], [47.6, 2466.0], [47.7, 2467.0], [47.8, 2469.0], [47.9, 2469.0], [48.0, 2470.0], [48.1, 2472.0], [48.2, 2472.0], [48.3, 2480.0], [48.4, 2483.0], [48.5, 2484.0], [48.6, 2487.0], [48.7, 2490.0], [48.8, 2490.0], [48.9, 2491.0], [49.0, 2492.0], [49.1, 2494.0], [49.2, 2495.0], [49.3, 2496.0], [49.4, 2500.0], [49.5, 2500.0], [49.6, 2501.0], [49.7, 2502.0], [49.8, 2505.0], [49.9, 2506.0], [50.0, 2509.0], [50.1, 2510.0], [50.2, 2511.0], [50.3, 2513.0], [50.4, 2513.0], [50.5, 2514.0], [50.6, 2514.0], [50.7, 2516.0], [50.8, 2516.0], [50.9, 2521.0], [51.0, 2524.0], [51.1, 2525.0], [51.2, 2527.0], [51.3, 2530.0], [51.4, 2533.0], [51.5, 2533.0], [51.6, 2534.0], [51.7, 2535.0], [51.8, 2542.0], [51.9, 2547.0], [52.0, 2554.0], [52.1, 2560.0], [52.2, 2561.0], [52.3, 2561.0], [52.4, 2561.0], [52.5, 2561.0], [52.6, 2562.0], [52.7, 2563.0], [52.8, 2566.0], [52.9, 2573.0], [53.0, 2574.0], [53.1, 2577.0], [53.2, 2578.0], [53.3, 2588.0], [53.4, 2589.0], [53.5, 2593.0], [53.6, 2595.0], [53.7, 2598.0], [53.8, 2608.0], [53.9, 2611.0], [54.0, 2614.0], [54.1, 2618.0], [54.2, 2620.0], [54.3, 2622.0], [54.4, 2625.0], [54.5, 2626.0], [54.6, 2626.0], [54.7, 2628.0], [54.8, 2628.0], [54.9, 2628.0], [55.0, 2632.0], [55.1, 2634.0], [55.2, 2639.0], [55.3, 2642.0], [55.4, 2650.0], [55.5, 2652.0], [55.6, 2654.0], [55.7, 2663.0], [55.8, 2668.0], [55.9, 2671.0], [56.0, 2676.0], [56.1, 2678.0], [56.2, 2682.0], [56.3, 2685.0], [56.4, 2687.0], [56.5, 2689.0], [56.6, 2691.0], [56.7, 2700.0], [56.8, 2701.0], [56.9, 2705.0], [57.0, 2706.0], [57.1, 2714.0], [57.2, 2718.0], [57.3, 2723.0], [57.4, 2724.0], [57.5, 2724.0], [57.6, 2725.0], [57.7, 2730.0], [57.8, 2733.0], [57.9, 2735.0], [58.0, 2736.0], [58.1, 2742.0], [58.2, 2742.0], [58.3, 2745.0], [58.4, 2749.0], [58.5, 2751.0], [58.6, 2762.0], [58.7, 2765.0], [58.8, 2770.0], [58.9, 2776.0], [59.0, 2778.0], [59.1, 2784.0], [59.2, 2786.0], [59.3, 2795.0], [59.4, 2804.0], [59.5, 2804.0], [59.6, 2807.0], [59.7, 2813.0], [59.8, 2815.0], [59.9, 2816.0], [60.0, 2829.0], [60.1, 2837.0], [60.2, 2848.0], [60.3, 2862.0], [60.4, 2872.0], [60.5, 2902.0], [60.6, 2915.0], [60.7, 2925.0], [60.8, 2933.0], [60.9, 2938.0], [61.0, 2948.0], [61.1, 3236.0], [61.2, 3288.0], [61.3, 3345.0], [61.4, 3361.0], [61.5, 3373.0], [61.6, 3391.0], [61.7, 3459.0], [61.8, 3518.0], [61.9, 3532.0], [62.0, 3550.0], [62.1, 3655.0], [62.2, 4209.0], [62.3, 4458.0], [62.4, 4580.0], [62.5, 4643.0], [62.6, 5797.0], [62.7, 5845.0], [62.8, 5865.0], [62.9, 5874.0], [63.0, 5876.0], [63.1, 5880.0], [63.2, 5881.0], [63.3, 5889.0], [63.4, 5897.0], [63.5, 5903.0], [63.6, 5903.0], [63.7, 5904.0], [63.8, 5931.0], [63.9, 5934.0], [64.0, 5936.0], [64.1, 5939.0], [64.2, 5967.0], [64.3, 5973.0], [64.4, 5984.0], [64.5, 5989.0], [64.6, 5997.0], [64.7, 6002.0], [64.8, 6019.0], [64.9, 6053.0], [65.0, 6071.0], [65.1, 6073.0], [65.2, 6090.0], [65.3, 6109.0], [65.4, 6122.0], [65.5, 6124.0], [65.6, 6129.0], [65.7, 6135.0], [65.8, 6144.0], [65.9, 6150.0], [66.0, 6162.0], [66.1, 6162.0], [66.2, 6164.0], [66.3, 6174.0], [66.4, 6178.0], [66.5, 6180.0], [66.6, 6187.0], [66.7, 6191.0], [66.8, 6203.0], [66.9, 6211.0], [67.0, 6212.0], [67.1, 6212.0], [67.2, 6222.0], [67.3, 6225.0], [67.4, 6237.0], [67.5, 6252.0], [67.6, 6256.0], [67.7, 6256.0], [67.8, 6260.0], [67.9, 6270.0], [68.0, 6271.0], [68.1, 6272.0], [68.2, 6273.0], [68.3, 6278.0], [68.4, 6281.0], [68.5, 6292.0], [68.6, 6293.0], [68.7, 6303.0], [68.8, 6303.0], [68.9, 6304.0], [69.0, 6305.0], [69.1, 6308.0], [69.2, 6309.0], [69.3, 6320.0], [69.4, 6325.0], [69.5, 6328.0], [69.6, 6342.0], [69.7, 6345.0], [69.8, 6359.0], [69.9, 6361.0], [70.0, 6362.0], [70.1, 6365.0], [70.2, 6365.0], [70.3, 6365.0], [70.4, 6374.0], [70.5, 6379.0], [70.6, 6380.0], [70.7, 6380.0], [70.8, 6382.0], [70.9, 6390.0], [71.0, 6395.0], [71.1, 6397.0], [71.2, 6398.0], [71.3, 6399.0], [71.4, 6399.0], [71.5, 6403.0], [71.6, 6410.0], [71.7, 6412.0], [71.8, 6429.0], [71.9, 6429.0], [72.0, 6445.0], [72.1, 6448.0], [72.2, 6450.0], [72.3, 6451.0], [72.4, 6458.0], [72.5, 6459.0], [72.6, 6470.0], [72.7, 6474.0], [72.8, 6476.0], [72.9, 6477.0], [73.0, 6491.0], [73.1, 6492.0], [73.2, 6495.0], [73.3, 6505.0], [73.4, 6513.0], [73.5, 6514.0], [73.6, 6515.0], [73.7, 6525.0], [73.8, 6531.0], [73.9, 6532.0], [74.0, 6537.0], [74.1, 6537.0], [74.2, 6544.0], [74.3, 6545.0], [74.4, 6546.0], [74.5, 6546.0], [74.6, 6553.0], [74.7, 6569.0], [74.8, 6569.0], [74.9, 6573.0], [75.0, 6573.0], [75.1, 6574.0], [75.2, 6583.0], [75.3, 6584.0], [75.4, 6591.0], [75.5, 6592.0], [75.6, 6595.0], [75.7, 6596.0], [75.8, 6597.0], [75.9, 6605.0], [76.0, 6614.0], [76.1, 6614.0], [76.2, 6625.0], [76.3, 6637.0], [76.4, 6641.0], [76.5, 6649.0], [76.6, 6652.0], [76.7, 6660.0], [76.8, 6670.0], [76.9, 6687.0], [77.0, 6694.0], [77.1, 6700.0], [77.2, 6700.0], [77.3, 6704.0], [77.4, 6730.0], [77.5, 6742.0], [77.6, 6743.0], [77.7, 6746.0], [77.8, 6754.0], [77.9, 6766.0], [78.0, 6766.0], [78.1, 6768.0], [78.2, 6774.0], [78.3, 6775.0], [78.4, 6779.0], [78.5, 6780.0], [78.6, 6790.0], [78.7, 6799.0], [78.8, 6800.0], [78.9, 6805.0], [79.0, 6806.0], [79.1, 6808.0], [79.2, 6810.0], [79.3, 6812.0], [79.4, 6812.0], [79.5, 6815.0], [79.6, 6820.0], [79.7, 6825.0], [79.8, 6833.0], [79.9, 6833.0], [80.0, 6834.0], [80.1, 6839.0], [80.2, 6839.0], [80.3, 6842.0], [80.4, 6847.0], [80.5, 6856.0], [80.6, 6860.0], [80.7, 6868.0], [80.8, 6870.0], [80.9, 6873.0], [81.0, 6874.0], [81.1, 6877.0], [81.2, 6879.0], [81.3, 6893.0], [81.4, 6893.0], [81.5, 6896.0], [81.6, 6898.0], [81.7, 6901.0], [81.8, 6906.0], [81.9, 6906.0], [82.0, 6906.0], [82.1, 6907.0], [82.2, 6910.0], [82.3, 6911.0], [82.4, 6913.0], [82.5, 6916.0], [82.6, 6919.0], [82.7, 6923.0], [82.8, 6945.0], [82.9, 6946.0], [83.0, 6949.0], [83.1, 6952.0], [83.2, 6954.0], [83.3, 6960.0], [83.4, 6961.0], [83.5, 6967.0], [83.6, 6968.0], [83.7, 6968.0], [83.8, 6972.0], [83.9, 6975.0], [84.0, 6978.0], [84.1, 6980.0], [84.2, 6990.0], [84.3, 6991.0], [84.4, 7003.0], [84.5, 7017.0], [84.6, 7018.0], [84.7, 7020.0], [84.8, 7028.0], [84.9, 7036.0], [85.0, 7036.0], [85.1, 7040.0], [85.2, 7040.0], [85.3, 7043.0], [85.4, 7047.0], [85.5, 7049.0], [85.6, 7049.0], [85.7, 7050.0], [85.8, 7061.0], [85.9, 7065.0], [86.0, 7068.0], [86.1, 7071.0], [86.2, 7072.0], [86.3, 7072.0], [86.4, 7082.0], [86.5, 7088.0], [86.6, 7103.0], [86.7, 7109.0], [86.8, 7112.0], [86.9, 7115.0], [87.0, 7118.0], [87.1, 7119.0], [87.2, 7137.0], [87.3, 7138.0], [87.4, 7143.0], [87.5, 7144.0], [87.6, 7147.0], [87.7, 7151.0], [87.8, 7155.0], [87.9, 7157.0], [88.0, 7158.0], [88.1, 7166.0], [88.2, 7188.0], [88.3, 7190.0], [88.4, 7190.0], [88.5, 7190.0], [88.6, 7197.0], [88.7, 7206.0], [88.8, 7208.0], [88.9, 7209.0], [89.0, 7216.0], [89.1, 7216.0], [89.2, 7226.0], [89.3, 7226.0], [89.4, 7231.0], [89.5, 7235.0], [89.6, 7237.0], [89.7, 7238.0], [89.8, 7242.0], [89.9, 7245.0], [90.0, 7246.0], [90.1, 7249.0], [90.2, 7255.0], [90.3, 7255.0], [90.4, 7260.0], [90.5, 7260.0], [90.6, 7263.0], [90.7, 7268.0], [90.8, 7274.0], [90.9, 7280.0], [91.0, 7281.0], [91.1, 7282.0], [91.2, 7283.0], [91.3, 7289.0], [91.4, 7290.0], [91.5, 7290.0], [91.6, 7290.0], [91.7, 7292.0], [91.8, 7299.0], [91.9, 7317.0], [92.0, 7321.0], [92.1, 7328.0], [92.2, 7330.0], [92.3, 7330.0], [92.4, 7331.0], [92.5, 7343.0], [92.6, 7346.0], [92.7, 7347.0], [92.8, 7350.0], [92.9, 7353.0], [93.0, 7375.0], [93.1, 7378.0], [93.2, 7393.0], [93.3, 7399.0], [93.4, 7404.0], [93.5, 7410.0], [93.6, 7414.0], [93.7, 7421.0], [93.8, 7422.0], [93.9, 7424.0], [94.0, 7425.0], [94.1, 7435.0], [94.2, 7437.0], [94.3, 7441.0], [94.4, 7443.0], [94.5, 7447.0], [94.6, 7473.0], [94.7, 7475.0], [94.8, 7478.0], [94.9, 7479.0], [95.0, 7497.0], [95.1, 7500.0], [95.2, 7507.0], [95.3, 7510.0], [95.4, 7511.0], [95.5, 7520.0], [95.6, 7529.0], [95.7, 7536.0], [95.8, 7542.0], [95.9, 7549.0], [96.0, 7569.0], [96.1, 7587.0], [96.2, 7604.0], [96.3, 7622.0], [96.4, 7623.0], [96.5, 7627.0], [96.6, 7634.0], [96.7, 7639.0], [96.8, 7658.0], [96.9, 7664.0], [97.0, 7664.0], [97.1, 7673.0], [97.2, 7675.0], [97.3, 7679.0], [97.4, 7683.0], [97.5, 7687.0], [97.6, 7706.0], [97.7, 7745.0], [97.8, 7752.0], [97.9, 7770.0], [98.0, 7804.0], [98.1, 7814.0], [98.2, 7831.0], [98.3, 7838.0], [98.4, 7852.0], [98.5, 7853.0], [98.6, 7854.0], [98.7, 7868.0], [98.8, 7902.0], [98.9, 7905.0], [99.0, 7927.0], [99.1, 7948.0], [99.2, 7950.0], [99.3, 7952.0], [99.4, 7973.0], [99.5, 8034.0], [99.6, 8054.0], [99.7, 8068.0], [99.8, 8097.0], [99.9, 8178.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 61.0, "series": [{"data": [[600.0, 15.0], [700.0, 10.0], [800.0, 19.0], [900.0, 19.0], [1000.0, 14.0], [1100.0, 20.0], [1200.0, 16.0], [1300.0, 14.0], [1400.0, 15.0], [1500.0, 18.0], [1600.0, 10.0], [1700.0, 19.0], [1800.0, 15.0], [1900.0, 21.0], [2000.0, 15.0], [2100.0, 31.0], [2200.0, 60.0], [2300.0, 58.0], [2400.0, 61.0], [2500.0, 44.0], [2600.0, 29.0], [2700.0, 27.0], [2800.0, 11.0], [2900.0, 6.0], [3200.0, 2.0], [3300.0, 4.0], [3400.0, 1.0], [3500.0, 3.0], [3600.0, 1.0], [4200.0, 1.0], [4400.0, 1.0], [4600.0, 1.0], [4500.0, 1.0], [5700.0, 1.0], [5800.0, 8.0], [6100.0, 15.0], [5900.0, 12.0], [6000.0, 6.0], [6200.0, 19.0], [6300.0, 28.0], [6400.0, 18.0], [6500.0, 26.0], [6600.0, 13.0], [6700.0, 17.0], [6800.0, 29.0], [6900.0, 27.0], [7000.0, 22.0], [7100.0, 21.0], [7200.0, 32.0], [7400.0, 17.0], [7300.0, 15.0], [7500.0, 11.0], [7600.0, 14.0], [7800.0, 8.0], [7700.0, 4.0], [7900.0, 7.0], [8000.0, 4.0], [8100.0, 1.0], [100.0, 3.0], [200.0, 11.0], [300.0, 4.0], [400.0, 16.0], [500.0, 9.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 34.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 815.0, "series": [{"data": [[0.0, 34.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 151.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 815.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 357.04600000000016, "minX": 1.59101016E12, "maxY": 357.04600000000016, "series": [{"data": [[1.59101016E12, 357.04600000000016]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59101016E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 431.3333333333333, "minX": 1.0, "maxY": 8178.0, "series": [{"data": [[2.0, 7905.0], [3.0, 7752.0], [4.0, 7852.0], [5.0, 7838.0], [6.0, 7831.0], [7.0, 7814.0], [8.0, 7770.0], [9.0, 7706.0], [10.0, 7683.0], [11.0, 7679.0], [12.0, 7639.0], [13.0, 7627.0], [14.0, 8178.0], [15.0, 7510.0], [16.0, 7507.0], [17.0, 8097.0], [18.0, 7443.0], [19.0, 8068.0], [20.0, 8054.0], [21.0, 8034.0], [22.0, 7973.0], [23.0, 7948.0], [24.0, 7950.0], [25.0, 7952.0], [26.0, 7927.0], [27.0, 7868.0], [29.0, 7774.5], [30.0, 7854.0], [31.0, 7353.0], [33.0, 7331.0], [32.0, 7343.0], [35.0, 7622.0], [34.0, 7634.0], [36.0, 7317.0], [39.0, 7623.0], [38.0, 7409.5], [41.0, 7479.0], [40.0, 7511.0], [43.0, 7604.0], [42.0, 7280.0], [45.0, 7249.0], [44.0, 7255.0], [47.0, 7211.5], [49.0, 7238.0], [48.0, 7147.0], [51.0, 7475.0], [50.0, 7138.0], [53.0, 7040.0], [52.0, 7040.0], [55.0, 7378.0], [54.0, 7375.0], [57.0, 7003.0], [56.0, 6980.0], [59.0, 7664.0], [58.0, 6960.0], [61.0, 7346.0], [60.0, 6991.0], [63.0, 7347.0], [62.0, 7328.0], [67.0, 7282.0], [66.0, 7321.0], [65.0, 7330.0], [64.0, 7290.0], [71.0, 7549.0], [70.0, 7283.0], [69.0, 7587.0], [68.0, 7536.0], [75.0, 7542.0], [74.0, 7231.0], [73.0, 7237.0], [72.0, 7260.0], [79.0, 7478.0], [78.0, 7497.0], [77.0, 7473.0], [76.0, 7206.0], [83.0, 7422.0], [82.0, 7404.0], [81.0, 7119.0], [80.0, 7410.0], [87.0, 7082.0], [86.0, 7242.0], [85.0, 7424.0], [84.0, 7421.0], [91.0, 6961.0], [90.0, 7260.0], [89.0, 7065.0], [88.0, 7071.0], [95.0, 7020.0], [94.0, 7235.0], [93.0, 7036.0], [92.0, 7043.0], [99.0, 3747.0], [98.0, 6968.0], [97.0, 7281.0], [96.0, 7350.0], [100.0, 3531.5], [102.0, 3579.0], [103.0, 7853.0], [101.0, 6946.0], [106.0, 3647.5], [105.0, 1189.5714285714284], [107.0, 7226.0], [104.0, 7103.0], [110.0, 2500.6666666666665], [109.0, 2598.0], [111.0, 7017.0], [108.0, 6893.0], [115.0, 6916.0], [114.0, 6780.0], [113.0, 6945.0], [112.0, 6808.0], [119.0, 7675.0], [118.0, 6898.0], [117.0, 6906.0], [116.0, 7687.0], [123.0, 7673.0], [122.0, 6873.0], [121.0, 7664.0], [120.0, 7658.0], [124.0, 3577.0], [127.0, 3567.0], [126.0, 6834.0], [125.0, 6806.0], [135.0, 5124.666666666667], [134.0, 431.3333333333333], [133.0, 7435.0], [132.0, 7500.0], [131.0, 7569.0], [130.0, 6730.0], [129.0, 6743.0], [128.0, 6768.0], [136.0, 1408.5714285714284], [137.0, 3925.0], [138.0, 3920.5], [139.0, 2194.5], [140.0, 3558.5], [143.0, 2795.0], [142.0, 3569.5], [141.0, 6649.0], [146.0, 3550.0], [145.0, 3545.0], [144.0, 3901.0], [151.0, 7166.0], [150.0, 6553.0], [149.0, 6569.0], [148.0, 6537.0], [147.0, 6573.0], [156.0, 3913.5], [155.0, 3929.0], [154.0, 3557.0], [157.0, 2748.0], [159.0, 6476.0], [158.0, 6450.0], [153.0, 7447.0], [152.0, 7290.0], [161.0, 3527.0], [167.0, 7190.0], [166.0, 7190.0], [165.0, 7289.0], [164.0, 6399.0], [163.0, 7151.0], [162.0, 7216.0], [160.0, 7209.0], [175.0, 6842.0], [174.0, 6874.0], [173.0, 6906.0], [172.0, 7216.0], [171.0, 7246.0], [170.0, 7226.0], [169.0, 6954.0], [168.0, 7263.0], [176.0, 2802.0], [178.0, 2215.5], [177.0, 2711.3333333333335], [179.0, 2712.0], [180.0, 3736.0], [183.0, 1748.0], [182.0, 2274.0], [181.0, 7109.0], [184.0, 3777.0], [191.0, 3799.5], [190.0, 6990.0], [189.0, 6779.0], [188.0, 6766.0], [187.0, 6910.0], [186.0, 6820.0], [185.0, 6856.0], [192.0, 2276.75], [197.0, 3774.0], [198.0, 6839.0], [196.0, 6825.0], [195.0, 6704.0], [194.0, 6906.0], [193.0, 6975.0], [204.0, 3725.0], [207.0, 6592.0], [206.0, 6545.0], [205.0, 6573.0], [203.0, 6660.0], [202.0, 6605.0], [201.0, 6614.0], [200.0, 6655.5], [215.0, 6515.0], [214.0, 6532.0], [213.0, 6505.0], [212.0, 6537.0], [211.0, 6514.0], [210.0, 6544.0], [209.0, 6584.0], [208.0, 6597.0], [216.0, 3649.0], [218.0, 3674.5], [220.0, 3654.0], [223.0, 6412.0], [222.0, 6380.0], [221.0, 6477.0], [219.0, 6459.0], [217.0, 6470.0], [226.0, 3570.0], [228.0, 2664.333333333333], [227.0, 4050.5], [231.0, 6292.0], [230.0, 6304.0], [229.0, 6293.0], [225.0, 6359.0], [224.0, 6397.0], [235.0, 3996.5], [234.0, 4016.5], [239.0, 7208.0], [238.0, 7049.0], [237.0, 7112.0], [236.0, 7188.0], [233.0, 7028.0], [232.0, 7061.0], [241.0, 2935.0], [240.0, 2972.3333333333335], [242.0, 2925.666666666667], [244.0, 4017.5], [247.0, 3908.0], [246.0, 2484.75], [245.0, 4037.0], [243.0, 7143.0], [252.0, 2937.0], [255.0, 3898.0], [254.0, 2883.666666666667], [253.0, 2903.0], [251.0, 7068.0], [250.0, 7072.0], [249.0, 6919.0], [248.0, 7050.0], [271.0, 6754.0], [265.0, 3870.5], [270.0, 6766.0], [269.0, 6775.0], [268.0, 6805.0], [259.0, 6952.0], [258.0, 6839.0], [257.0, 6870.0], [256.0, 7047.0], [267.0, 6812.0], [266.0, 6815.0], [264.0, 6911.0], [263.0, 6799.0], [262.0, 6812.0], [261.0, 7018.0], [260.0, 6833.0], [286.0, 6474.0], [281.0, 2365.75], [282.0, 1958.6666666666667], [284.0, 2861.666666666667], [283.0, 2429.0], [287.0, 6531.0], [285.0, 6569.0], [280.0, 6687.0], [279.0, 6694.0], [273.0, 6742.0], [272.0, 6746.0], [275.0, 6596.0], [274.0, 6637.0], [278.0, 6574.0], [277.0, 6700.0], [276.0, 6700.0], [301.0, 6362.0], [291.0, 3684.0], [295.0, 6410.0], [288.0, 6513.0], [290.0, 6395.0], [289.0, 6495.0], [294.0, 3743.75], [293.0, 1086.5], [292.0, 6429.0], [298.0, 3697.5], [297.0, 6445.0], [296.0, 6458.0], [303.0, 6256.0], [302.0, 6272.0], [300.0, 6379.0], [299.0, 6403.0], [307.0, 3731.0], [304.0, 3789.5], [305.0, 2841.0], [306.0, 6374.0], [309.0, 3696.0], [311.0, 6212.0], [310.0, 6303.0], [308.0, 3709.0], [316.0, 2864.666666666667], [317.0, 3758.0], [315.0, 3672.5], [314.0, 2829.666666666667], [313.0, 3647.0], [319.0, 3719.5], [312.0, 6270.0], [318.0, 2861.0], [334.0, 6201.0], [323.0, 3740.5], [327.0, 3737.5], [320.0, 6345.0], [322.0, 6328.0], [321.0, 6303.0], [326.0, 6281.0], [325.0, 6273.0], [324.0, 6271.0], [332.0, 2868.666666666667], [335.0, 6222.0], [331.0, 6203.0], [330.0, 6162.0], [329.0, 6252.0], [328.0, 6256.0], [349.0, 3584.5], [338.0, 3691.5], [339.0, 3697.5], [337.0, 3691.0], [336.0, 6237.0], [341.0, 3675.5], [340.0, 6090.0], [342.0, 6144.0], [343.0, 6162.0], [344.0, 3662.0], [345.0, 6071.0], [347.0, 6122.0], [346.0, 6053.0], [351.0, 5997.0], [350.0, 6073.0], [348.0, 6109.0], [355.0, 3631.5], [357.0, 2802.333333333333], [356.0, 5936.0], [358.0, 3589.5], [359.0, 3645.0], [352.0, 5984.0], [354.0, 5967.0], [353.0, 5973.0], [360.0, 3601.5], [361.0, 5897.0], [363.0, 5903.0], [362.0, 5903.0], [364.0, 3548.0], [367.0, 2402.5], [366.0, 3568.5], [365.0, 3590.0], [382.0, 2593.0], [368.0, 2426.75], [372.0, 3567.0], [373.0, 6164.0], [375.0, 6129.0], [374.0, 4580.0], [383.0, 2509.0], [381.0, 4209.0], [380.0, 2513.0], [371.0, 5845.0], [370.0, 5881.0], [369.0, 5876.0], [379.0, 2742.0], [378.0, 4458.0], [377.0, 4643.0], [376.0, 6124.0], [398.0, 2293.0], [397.0, 1820.0], [399.0, 2284.0], [396.0, 2299.0], [395.0, 2307.0], [394.0, 2378.0], [393.0, 2374.0], [392.0, 3361.0], [391.0, 3345.0], [385.0, 2862.0], [384.0, 3391.0], [387.0, 2435.0], [386.0, 2938.0], [390.0, 2391.0], [389.0, 2408.0], [388.0, 2416.0], [414.0, 2622.0], [402.0, 1812.0], [403.0, 1870.0], [406.0, 1957.5], [405.0, 1848.5], [404.0, 2313.0], [407.0, 1732.0], [401.0, 2270.0], [400.0, 2438.0], [411.0, 1792.0], [410.0, 2404.0], [409.0, 2419.0], [408.0, 2628.0], [413.0, 2429.0], [412.0, 2279.0], [428.0, 1891.5], [416.0, 2053.3333333333335], [417.0, 1947.5], [419.0, 2185.0], [418.0, 2240.0], [421.0, 1774.5], [420.0, 2933.0], [423.0, 3236.0], [422.0, 2354.0], [429.0, 1873.0], [431.0, 2547.0], [425.0, 2578.0], [424.0, 2464.0], [430.0, 2150.0], [427.0, 2449.0], [426.0, 2159.0], [435.0, 1820.5], [432.0, 1812.0], [434.0, 2495.0], [433.0, 2514.0], [440.0, 1861.0], [439.0, 2082.0], [438.0, 1692.6], [437.0, 2039.5], [436.0, 2227.0], [441.0, 2012.0], [443.0, 1634.6666666666667], [442.0, 3459.0], [447.0, 1831.0], [446.0, 2423.0], [445.0, 2096.0], [444.0, 2456.0], [449.0, 1662.8], [448.0, 1713.5], [450.0, 1784.3333333333333], [452.0, 1831.5], [451.0, 1946.0], [453.0, 1899.6666666666667], [454.0, 2590.0], [455.0, 3373.0], [459.0, 2546.0], [458.0, 2004.5], [457.0, 2019.5], [456.0, 2687.0], [463.0, 2608.0], [462.0, 2198.0], [461.0, 2155.0], [460.0, 2464.0], [479.0, 2318.0], [473.0, 1884.0], [478.0, 1892.5], [477.0, 1977.0], [476.0, 1952.0], [467.0, 2577.0], [466.0, 2073.0], [465.0, 2244.0], [464.0, 2533.0], [475.0, 2252.0], [474.0, 2588.0], [472.0, 2323.0], [471.0, 2272.0], [470.0, 2628.0], [469.0, 2562.0], [468.0, 2632.0], [494.0, 1991.0], [480.0, 1811.0], [487.0, 1925.0], [486.0, 2492.0], [485.0, 2837.0], [484.0, 2306.0], [493.0, 2060.5], [495.0, 2311.0], [492.0, 2561.0], [483.0, 2490.0], [482.0, 2218.0], [481.0, 2595.0], [491.0, 2423.0], [490.0, 2494.0], [489.0, 2784.0], [488.0, 2466.0], [510.0, 2349.0], [498.0, 2063.0], [499.0, 1986.0], [503.0, 2224.6666666666665], [497.0, 2506.0], [496.0, 2813.0], [501.0, 2316.0], [500.0, 2514.0], [504.0, 1912.0], [505.0, 2252.5], [507.0, 2561.0], [506.0, 2776.0], [511.0, 2323.0], [509.0, 2484.0], [508.0, 2804.0], [537.0, 2915.0], [541.0, 1994.0], [512.0, 2085.0], [521.0, 2215.5], [520.0, 2236.0], [523.0, 2663.0], [522.0, 2642.0], [525.0, 2210.0], [524.0, 2217.0], [527.0, 2718.0], [526.0, 2701.0], [529.0, 2191.0], [528.0, 2203.0], [530.0, 2243.0], [543.0, 2736.0], [542.0, 2948.0], [532.0, 2280.0], [535.0, 2272.0], [534.0, 2223.0], [533.0, 2628.0], [538.0, 1771.5], [536.0, 2724.0], [519.0, 2303.0], [518.0, 2266.0], [517.0, 2786.0], [516.0, 2307.0], [515.0, 2668.0], [514.0, 2330.0], [513.0, 2573.0], [540.0, 2257.0], [539.0, 2274.6666666666665], [570.0, 2006.2727272727273], [547.0, 1968.0], [545.0, 2114.3333333333335], [546.0, 2654.0], [548.0, 1961.0], [549.0, 2527.0], [551.0, 2243.0], [550.0, 2762.0], [568.0, 2334.0], [569.0, 2180.5], [556.0, 2092.5], [555.0, 2807.0], [554.0, 2408.0], [553.0, 2326.0], [552.0, 2925.0], [558.0, 2140.0], [557.0, 2383.0], [559.0, 2422.0], [561.0, 2004.5], [564.0, 2111.5], [563.0, 2263.0], [562.0, 2388.0], [567.0, 1969.857142857143], [566.0, 2416.0], [565.0, 2724.0], [571.0, 2132.5], [572.0, 2130.0], [575.0, 2317.0], [560.0, 2829.0], [574.0, 2324.0], [573.0, 2429.0], [605.0, 2361.0], [582.0, 2382.5], [576.0, 2091.0], [577.0, 2373.0], [579.0, 2742.0], [578.0, 2676.0], [581.0, 2360.0], [580.0, 2902.0], [591.0, 2407.0], [590.0, 2816.0], [589.0, 2795.0], [588.0, 2848.0], [583.0, 2343.0], [600.0, 2392.0], [602.0, 2320.0], [601.0, 2370.0], [604.0, 2706.0], [603.0, 2395.0], [584.0, 2100.5], [586.0, 2735.0], [585.0, 2730.0], [587.0, 2207.5], [596.0, 2170.0], [595.0, 2273.0], [594.0, 2770.0], [593.0, 2765.0], [592.0, 2347.0], [597.0, 2804.0], [599.0, 2435.0], [598.0, 2438.0], [607.0, 2237.0], [606.0, 2371.0], [634.0, 2243.0], [610.0, 2200.3333333333335], [609.0, 2406.0], [608.0, 2561.0], [623.0, 2510.0], [622.0, 2639.0], [621.0, 2671.0], [620.0, 2542.0], [619.0, 2678.0], [618.0, 2700.0], [617.0, 2554.0], [616.0, 2563.0], [611.0, 2276.6666666666665], [613.0, 2705.0], [612.0, 2691.0], [615.0, 2408.0], [614.0, 2533.0], [633.0, 2432.0], [632.0, 2400.0], [639.0, 2287.5], [625.0, 2614.0], [624.0, 2626.0], [627.0, 2487.0], [626.0, 2467.0], [629.0, 2598.0], [628.0, 2483.0], [631.0, 2448.0], [630.0, 2560.0], [638.0, 2472.0], [637.0, 2521.0], [636.0, 2524.0], [635.0, 2480.0], [647.0, 2332.75], [641.0, 2283.0], [640.0, 2317.0], [643.0, 2339.0], [642.0, 2566.0], [644.0, 2328.0], [657.0, 2247.5], [656.0, 2385.0], [671.0, 2301.0], [670.0, 2296.0], [669.0, 2496.0], [668.0, 2454.0], [667.0, 2500.0], [666.0, 2342.0], [665.0, 2340.0], [664.0, 2451.0], [659.0, 2335.5], [658.0, 2354.5], [660.0, 2512.75], [662.0, 2268.75], [661.0, 2314.5], [663.0, 2246.6666666666665], [646.0, 2094.0], [645.0, 2435.0], [652.0, 2400.0], [651.0, 2296.0], [650.0, 2361.0], [649.0, 2561.0], [648.0, 2505.0], [653.0, 2310.5], [654.0, 2407.0], [655.0, 2530.0], [685.0, 2285.5], [673.0, 2286.0], [674.0, 2217.3333333333335], [675.0, 2399.0], [677.0, 2424.0], [676.0, 2262.0], [679.0, 2435.0], [678.0, 2247.0], [672.0, 2253.5], [681.0, 2296.5], [680.0, 2249.0], [682.0, 2241.0], [684.0, 2227.0], [683.0, 2315.0], [686.0, 2331.5], [687.0, 2315.0], [688.0, 2309.3333333333335], [689.0, 3288.0], [1.0, 7902.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[357.04600000000016, 3775.045000000001]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 689.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3350.0, "minX": 1.59101016E12, "maxY": 4300.0, "series": [{"data": [[1.59101016E12, 3350.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59101016E12, 4300.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59101016E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3775.045000000001, "minX": 1.59101016E12, "maxY": 3775.045000000001, "series": [{"data": [[1.59101016E12, 3775.045000000001]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59101016E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3774.9830000000015, "minX": 1.59101016E12, "maxY": 3774.9830000000015, "series": [{"data": [[1.59101016E12, 3774.9830000000015]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59101016E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4.343000000000007, "minX": 1.59101016E12, "maxY": 4.343000000000007, "series": [{"data": [[1.59101016E12, 4.343000000000007]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59101016E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 140.0, "minX": 1.59101016E12, "maxY": 8178.0, "series": [{"data": [[1.59101016E12, 8178.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59101016E12, 233.03599904537202]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59101016E12, 236.6396003818512]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59101016E12, 235.037999522686]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59101016E12, 140.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59101016E12, 2509.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59101016E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 415.5, "minX": 22.0, "maxY": 7845.0, "series": [{"data": [[131.0, 2465.0], [72.0, 6361.5], [38.0, 415.5], [22.0, 2900.0], [92.0, 1511.5], [102.0, 907.5], [26.0, 7845.0], [112.0, 2158.0], [117.0, 7281.0], [30.0, 5937.5], [127.0, 6856.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 131.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 415.5, "minX": 22.0, "maxY": 7845.0, "series": [{"data": [[131.0, 2465.0], [72.0, 6361.5], [38.0, 415.5], [22.0, 2900.0], [92.0, 1511.5], [102.0, 907.0], [26.0, 7845.0], [112.0, 2158.0], [117.0, 7281.0], [30.0, 5937.5], [127.0, 6856.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 131.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.59101016E12, "maxY": 16.666666666666668, "series": [{"data": [[1.59101016E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59101016E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.59101016E12, "maxY": 16.666666666666668, "series": [{"data": [[1.59101016E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59101016E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.59101016E12, "maxY": 16.666666666666668, "series": [{"data": [[1.59101016E12, 16.666666666666668]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59101016E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.59101016E12, "maxY": 16.666666666666668, "series": [{"data": [[1.59101016E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59101016E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

