/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 120.0, "minX": 0.0, "maxY": 8098.0, "series": [{"data": [[0.0, 120.0], [0.1, 163.0], [0.2, 186.0], [0.3, 186.0], [0.4, 194.0], [0.5, 196.0], [0.6, 201.0], [0.7, 214.0], [0.8, 263.0], [0.9, 281.0], [1.0, 283.0], [1.1, 290.0], [1.2, 297.0], [1.3, 310.0], [1.4, 310.0], [1.5, 337.0], [1.6, 343.0], [1.7, 368.0], [1.8, 377.0], [1.9, 382.0], [2.0, 387.0], [2.1, 387.0], [2.2, 394.0], [2.3, 394.0], [2.4, 394.0], [2.5, 399.0], [2.6, 400.0], [2.7, 425.0], [2.8, 425.0], [2.9, 436.0], [3.0, 438.0], [3.1, 474.0], [3.2, 477.0], [3.3, 478.0], [3.4, 496.0], [3.5, 515.0], [3.6, 521.0], [3.7, 528.0], [3.8, 531.0], [3.9, 537.0], [4.0, 543.0], [4.1, 545.0], [4.2, 546.0], [4.3, 547.0], [4.4, 559.0], [4.5, 570.0], [4.6, 593.0], [4.7, 594.0], [4.8, 605.0], [4.9, 615.0], [5.0, 618.0], [5.1, 626.0], [5.2, 632.0], [5.3, 643.0], [5.4, 646.0], [5.5, 651.0], [5.6, 654.0], [5.7, 661.0], [5.8, 667.0], [5.9, 670.0], [6.0, 672.0], [6.1, 672.0], [6.2, 688.0], [6.3, 692.0], [6.4, 693.0], [6.5, 698.0], [6.6, 702.0], [6.7, 703.0], [6.8, 710.0], [6.9, 718.0], [7.0, 734.0], [7.1, 739.0], [7.2, 741.0], [7.3, 742.0], [7.4, 774.0], [7.5, 802.0], [7.6, 804.0], [7.7, 811.0], [7.8, 814.0], [7.9, 826.0], [8.0, 843.0], [8.1, 851.0], [8.2, 860.0], [8.3, 862.0], [8.4, 862.0], [8.5, 866.0], [8.6, 876.0], [8.7, 879.0], [8.8, 881.0], [8.9, 886.0], [9.0, 888.0], [9.1, 891.0], [9.2, 903.0], [9.3, 910.0], [9.4, 913.0], [9.5, 936.0], [9.6, 942.0], [9.7, 947.0], [9.8, 947.0], [9.9, 948.0], [10.0, 950.0], [10.1, 956.0], [10.2, 958.0], [10.3, 963.0], [10.4, 963.0], [10.5, 971.0], [10.6, 971.0], [10.7, 973.0], [10.8, 974.0], [10.9, 974.0], [11.0, 983.0], [11.1, 1001.0], [11.2, 1002.0], [11.3, 1010.0], [11.4, 1018.0], [11.5, 1028.0], [11.6, 1037.0], [11.7, 1048.0], [11.8, 1052.0], [11.9, 1060.0], [12.0, 1083.0], [12.1, 1086.0], [12.2, 1087.0], [12.3, 1104.0], [12.4, 1104.0], [12.5, 1112.0], [12.6, 1120.0], [12.7, 1126.0], [12.8, 1138.0], [12.9, 1145.0], [13.0, 1150.0], [13.1, 1167.0], [13.2, 1176.0], [13.3, 1185.0], [13.4, 1207.0], [13.5, 1220.0], [13.6, 1236.0], [13.7, 1242.0], [13.8, 1244.0], [13.9, 1254.0], [14.0, 1273.0], [14.1, 1278.0], [14.2, 1285.0], [14.3, 1296.0], [14.4, 1313.0], [14.5, 1314.0], [14.6, 1314.0], [14.7, 1314.0], [14.8, 1316.0], [14.9, 1317.0], [15.0, 1324.0], [15.1, 1324.0], [15.2, 1350.0], [15.3, 1374.0], [15.4, 1382.0], [15.5, 1391.0], [15.6, 1393.0], [15.7, 1419.0], [15.8, 1429.0], [15.9, 1430.0], [16.0, 1433.0], [16.1, 1436.0], [16.2, 1442.0], [16.3, 1446.0], [16.4, 1448.0], [16.5, 1453.0], [16.6, 1501.0], [16.7, 1502.0], [16.8, 1504.0], [16.9, 1509.0], [17.0, 1515.0], [17.1, 1518.0], [17.2, 1518.0], [17.3, 1520.0], [17.4, 1531.0], [17.5, 1545.0], [17.6, 1550.0], [17.7, 1554.0], [17.8, 1557.0], [17.9, 1557.0], [18.0, 1560.0], [18.1, 1565.0], [18.2, 1568.0], [18.3, 1582.0], [18.4, 1585.0], [18.5, 1592.0], [18.6, 1597.0], [18.7, 1598.0], [18.8, 1600.0], [18.9, 1601.0], [19.0, 1603.0], [19.1, 1608.0], [19.2, 1610.0], [19.3, 1613.0], [19.4, 1613.0], [19.5, 1625.0], [19.6, 1639.0], [19.7, 1640.0], [19.8, 1653.0], [19.9, 1656.0], [20.0, 1677.0], [20.1, 1684.0], [20.2, 1697.0], [20.3, 1707.0], [20.4, 1711.0], [20.5, 1726.0], [20.6, 1726.0], [20.7, 1727.0], [20.8, 1740.0], [20.9, 1760.0], [21.0, 1769.0], [21.1, 1770.0], [21.2, 1771.0], [21.3, 1780.0], [21.4, 1781.0], [21.5, 1790.0], [21.6, 1796.0], [21.7, 1801.0], [21.8, 1809.0], [21.9, 1810.0], [22.0, 1816.0], [22.1, 1820.0], [22.2, 1827.0], [22.3, 1837.0], [22.4, 1843.0], [22.5, 1844.0], [22.6, 1852.0], [22.7, 1855.0], [22.8, 1883.0], [22.9, 1891.0], [23.0, 1896.0], [23.1, 1898.0], [23.2, 1947.0], [23.3, 1950.0], [23.4, 1956.0], [23.5, 1958.0], [23.6, 1963.0], [23.7, 1970.0], [23.8, 1989.0], [23.9, 1994.0], [24.0, 1995.0], [24.1, 2000.0], [24.2, 2010.0], [24.3, 2014.0], [24.4, 2017.0], [24.5, 2023.0], [24.6, 2030.0], [24.7, 2046.0], [24.8, 2049.0], [24.9, 2059.0], [25.0, 2071.0], [25.1, 2082.0], [25.2, 2087.0], [25.3, 2100.0], [25.4, 2101.0], [25.5, 2110.0], [25.6, 2114.0], [25.7, 2116.0], [25.8, 2118.0], [25.9, 2119.0], [26.0, 2120.0], [26.1, 2124.0], [26.2, 2131.0], [26.3, 2140.0], [26.4, 2144.0], [26.5, 2146.0], [26.6, 2149.0], [26.7, 2150.0], [26.8, 2155.0], [26.9, 2162.0], [27.0, 2176.0], [27.1, 2179.0], [27.2, 2183.0], [27.3, 2186.0], [27.4, 2191.0], [27.5, 2191.0], [27.6, 2193.0], [27.7, 2197.0], [27.8, 2199.0], [27.9, 2199.0], [28.0, 2200.0], [28.1, 2206.0], [28.2, 2207.0], [28.3, 2207.0], [28.4, 2219.0], [28.5, 2242.0], [28.6, 2252.0], [28.7, 2260.0], [28.8, 2267.0], [28.9, 2267.0], [29.0, 2270.0], [29.1, 2273.0], [29.2, 2277.0], [29.3, 2281.0], [29.4, 2283.0], [29.5, 2283.0], [29.6, 2284.0], [29.7, 2290.0], [29.8, 2291.0], [29.9, 2293.0], [30.0, 2294.0], [30.1, 2299.0], [30.2, 2308.0], [30.3, 2311.0], [30.4, 2313.0], [30.5, 2317.0], [30.6, 2318.0], [30.7, 2319.0], [30.8, 2319.0], [30.9, 2320.0], [31.0, 2322.0], [31.1, 2324.0], [31.2, 2333.0], [31.3, 2336.0], [31.4, 2337.0], [31.5, 2337.0], [31.6, 2340.0], [31.7, 2341.0], [31.8, 2343.0], [31.9, 2343.0], [32.0, 2344.0], [32.1, 2346.0], [32.2, 2349.0], [32.3, 2350.0], [32.4, 2353.0], [32.5, 2361.0], [32.6, 2363.0], [32.7, 2363.0], [32.8, 2364.0], [32.9, 2366.0], [33.0, 2368.0], [33.1, 2372.0], [33.2, 2376.0], [33.3, 2379.0], [33.4, 2379.0], [33.5, 2381.0], [33.6, 2383.0], [33.7, 2387.0], [33.8, 2388.0], [33.9, 2395.0], [34.0, 2395.0], [34.1, 2396.0], [34.2, 2396.0], [34.3, 2398.0], [34.4, 2399.0], [34.5, 2401.0], [34.6, 2403.0], [34.7, 2406.0], [34.8, 2409.0], [34.9, 2411.0], [35.0, 2414.0], [35.1, 2414.0], [35.2, 2415.0], [35.3, 2417.0], [35.4, 2420.0], [35.5, 2421.0], [35.6, 2422.0], [35.7, 2427.0], [35.8, 2428.0], [35.9, 2429.0], [36.0, 2435.0], [36.1, 2435.0], [36.2, 2436.0], [36.3, 2438.0], [36.4, 2439.0], [36.5, 2449.0], [36.6, 2457.0], [36.7, 2461.0], [36.8, 2464.0], [36.9, 2470.0], [37.0, 2470.0], [37.1, 2471.0], [37.2, 2475.0], [37.3, 2482.0], [37.4, 2483.0], [37.5, 2491.0], [37.6, 2492.0], [37.7, 2493.0], [37.8, 2498.0], [37.9, 2502.0], [38.0, 2504.0], [38.1, 2504.0], [38.2, 2506.0], [38.3, 2506.0], [38.4, 2506.0], [38.5, 2507.0], [38.6, 2507.0], [38.7, 2508.0], [38.8, 2509.0], [38.9, 2510.0], [39.0, 2512.0], [39.1, 2512.0], [39.2, 2514.0], [39.3, 2519.0], [39.4, 2522.0], [39.5, 2523.0], [39.6, 2524.0], [39.7, 2524.0], [39.8, 2526.0], [39.9, 2527.0], [40.0, 2530.0], [40.1, 2532.0], [40.2, 2532.0], [40.3, 2532.0], [40.4, 2536.0], [40.5, 2539.0], [40.6, 2539.0], [40.7, 2540.0], [40.8, 2541.0], [40.9, 2542.0], [41.0, 2542.0], [41.1, 2542.0], [41.2, 2544.0], [41.3, 2547.0], [41.4, 2551.0], [41.5, 2553.0], [41.6, 2555.0], [41.7, 2556.0], [41.8, 2557.0], [41.9, 2560.0], [42.0, 2563.0], [42.1, 2565.0], [42.2, 2567.0], [42.3, 2569.0], [42.4, 2579.0], [42.5, 2580.0], [42.6, 2581.0], [42.7, 2581.0], [42.8, 2585.0], [42.9, 2585.0], [43.0, 2588.0], [43.1, 2592.0], [43.2, 2593.0], [43.3, 2595.0], [43.4, 2595.0], [43.5, 2596.0], [43.6, 2596.0], [43.7, 2596.0], [43.8, 2599.0], [43.9, 2600.0], [44.0, 2601.0], [44.1, 2601.0], [44.2, 2604.0], [44.3, 2606.0], [44.4, 2607.0], [44.5, 2607.0], [44.6, 2613.0], [44.7, 2614.0], [44.8, 2614.0], [44.9, 2617.0], [45.0, 2624.0], [45.1, 2626.0], [45.2, 2627.0], [45.3, 2628.0], [45.4, 2630.0], [45.5, 2630.0], [45.6, 2631.0], [45.7, 2633.0], [45.8, 2636.0], [45.9, 2637.0], [46.0, 2638.0], [46.1, 2647.0], [46.2, 2648.0], [46.3, 2652.0], [46.4, 2656.0], [46.5, 2658.0], [46.6, 2659.0], [46.7, 2661.0], [46.8, 2665.0], [46.9, 2667.0], [47.0, 2670.0], [47.1, 2670.0], [47.2, 2670.0], [47.3, 2673.0], [47.4, 2677.0], [47.5, 2677.0], [47.6, 2679.0], [47.7, 2681.0], [47.8, 2681.0], [47.9, 2683.0], [48.0, 2689.0], [48.1, 2694.0], [48.2, 2697.0], [48.3, 2699.0], [48.4, 2701.0], [48.5, 2706.0], [48.6, 2707.0], [48.7, 2707.0], [48.8, 2716.0], [48.9, 2716.0], [49.0, 2718.0], [49.1, 2719.0], [49.2, 2721.0], [49.3, 2723.0], [49.4, 2726.0], [49.5, 2727.0], [49.6, 2727.0], [49.7, 2729.0], [49.8, 2730.0], [49.9, 2730.0], [50.0, 2730.0], [50.1, 2731.0], [50.2, 2731.0], [50.3, 2733.0], [50.4, 2737.0], [50.5, 2740.0], [50.6, 2741.0], [50.7, 2741.0], [50.8, 2744.0], [50.9, 2746.0], [51.0, 2747.0], [51.1, 2758.0], [51.2, 2760.0], [51.3, 2764.0], [51.4, 2764.0], [51.5, 2764.0], [51.6, 2766.0], [51.7, 2767.0], [51.8, 2768.0], [51.9, 2773.0], [52.0, 2773.0], [52.1, 2777.0], [52.2, 2778.0], [52.3, 2778.0], [52.4, 2779.0], [52.5, 2779.0], [52.6, 2780.0], [52.7, 2781.0], [52.8, 2782.0], [52.9, 2789.0], [53.0, 2790.0], [53.1, 2792.0], [53.2, 2792.0], [53.3, 2793.0], [53.4, 2795.0], [53.5, 2799.0], [53.6, 2801.0], [53.7, 2803.0], [53.8, 2805.0], [53.9, 2806.0], [54.0, 2808.0], [54.1, 2810.0], [54.2, 2810.0], [54.3, 2817.0], [54.4, 2822.0], [54.5, 2823.0], [54.6, 2823.0], [54.7, 2823.0], [54.8, 2828.0], [54.9, 2830.0], [55.0, 2833.0], [55.1, 2838.0], [55.2, 2839.0], [55.3, 2839.0], [55.4, 2846.0], [55.5, 2847.0], [55.6, 2849.0], [55.7, 2851.0], [55.8, 2852.0], [55.9, 2852.0], [56.0, 2853.0], [56.1, 2854.0], [56.2, 2854.0], [56.3, 2857.0], [56.4, 2860.0], [56.5, 2861.0], [56.6, 2862.0], [56.7, 2864.0], [56.8, 2870.0], [56.9, 2871.0], [57.0, 2873.0], [57.1, 2875.0], [57.2, 2878.0], [57.3, 2879.0], [57.4, 2885.0], [57.5, 2889.0], [57.6, 2894.0], [57.7, 2900.0], [57.8, 2920.0], [57.9, 2922.0], [58.0, 2927.0], [58.1, 2941.0], [58.2, 2944.0], [58.3, 2949.0], [58.4, 2950.0], [58.5, 2961.0], [58.6, 2961.0], [58.7, 2979.0], [58.8, 2984.0], [58.9, 2995.0], [59.0, 3003.0], [59.1, 3005.0], [59.2, 3008.0], [59.3, 3013.0], [59.4, 3016.0], [59.5, 3050.0], [59.6, 3076.0], [59.7, 3120.0], [59.8, 3147.0], [59.9, 3156.0], [60.0, 3188.0], [60.1, 3203.0], [60.2, 3216.0], [60.3, 3324.0], [60.4, 3415.0], [60.5, 3460.0], [60.6, 3511.0], [60.7, 3513.0], [60.8, 3543.0], [60.9, 4479.0], [61.0, 4480.0], [61.1, 4548.0], [61.2, 4563.0], [61.3, 4700.0], [61.4, 6012.0], [61.5, 6013.0], [61.6, 6016.0], [61.7, 6040.0], [61.8, 6044.0], [61.9, 6047.0], [62.0, 6056.0], [62.1, 6117.0], [62.2, 6134.0], [62.3, 6135.0], [62.4, 6155.0], [62.5, 6162.0], [62.6, 6184.0], [62.7, 6185.0], [62.8, 6223.0], [62.9, 6234.0], [63.0, 6240.0], [63.1, 6241.0], [63.2, 6244.0], [63.3, 6247.0], [63.4, 6265.0], [63.5, 6286.0], [63.6, 6302.0], [63.7, 6306.0], [63.8, 6310.0], [63.9, 6313.0], [64.0, 6322.0], [64.1, 6328.0], [64.2, 6332.0], [64.3, 6332.0], [64.4, 6335.0], [64.5, 6339.0], [64.6, 6340.0], [64.7, 6344.0], [64.8, 6350.0], [64.9, 6359.0], [65.0, 6368.0], [65.1, 6371.0], [65.2, 6419.0], [65.3, 6419.0], [65.4, 6424.0], [65.5, 6426.0], [65.6, 6441.0], [65.7, 6461.0], [65.8, 6478.0], [65.9, 6485.0], [66.0, 6496.0], [66.1, 6505.0], [66.2, 6516.0], [66.3, 6521.0], [66.4, 6534.0], [66.5, 6541.0], [66.6, 6544.0], [66.7, 6554.0], [66.8, 6556.0], [66.9, 6565.0], [67.0, 6569.0], [67.1, 6571.0], [67.2, 6573.0], [67.3, 6582.0], [67.4, 6582.0], [67.5, 6589.0], [67.6, 6590.0], [67.7, 6593.0], [67.8, 6599.0], [67.9, 6605.0], [68.0, 6628.0], [68.1, 6636.0], [68.2, 6640.0], [68.3, 6641.0], [68.4, 6653.0], [68.5, 6661.0], [68.6, 6664.0], [68.7, 6667.0], [68.8, 6672.0], [68.9, 6672.0], [69.0, 6688.0], [69.1, 6689.0], [69.2, 6691.0], [69.3, 6694.0], [69.4, 6715.0], [69.5, 6717.0], [69.6, 6718.0], [69.7, 6722.0], [69.8, 6728.0], [69.9, 6729.0], [70.0, 6733.0], [70.1, 6734.0], [70.2, 6735.0], [70.3, 6736.0], [70.4, 6737.0], [70.5, 6738.0], [70.6, 6743.0], [70.7, 6748.0], [70.8, 6759.0], [70.9, 6761.0], [71.0, 6762.0], [71.1, 6764.0], [71.2, 6772.0], [71.3, 6783.0], [71.4, 6787.0], [71.5, 6790.0], [71.6, 6790.0], [71.7, 6790.0], [71.8, 6792.0], [71.9, 6810.0], [72.0, 6815.0], [72.1, 6817.0], [72.2, 6817.0], [72.3, 6820.0], [72.4, 6825.0], [72.5, 6825.0], [72.6, 6835.0], [72.7, 6848.0], [72.8, 6849.0], [72.9, 6871.0], [73.0, 6875.0], [73.1, 6885.0], [73.2, 6886.0], [73.3, 6896.0], [73.4, 6898.0], [73.5, 6904.0], [73.6, 6904.0], [73.7, 6905.0], [73.8, 6914.0], [73.9, 6916.0], [74.0, 6917.0], [74.1, 6919.0], [74.2, 6924.0], [74.3, 6924.0], [74.4, 6925.0], [74.5, 6926.0], [74.6, 6926.0], [74.7, 6927.0], [74.8, 6943.0], [74.9, 6945.0], [75.0, 6952.0], [75.1, 6956.0], [75.2, 6959.0], [75.3, 6962.0], [75.4, 6965.0], [75.5, 6966.0], [75.6, 6967.0], [75.7, 6969.0], [75.8, 6969.0], [75.9, 6969.0], [76.0, 6972.0], [76.1, 6975.0], [76.2, 6981.0], [76.3, 6982.0], [76.4, 6991.0], [76.5, 6993.0], [76.6, 6994.0], [76.7, 7000.0], [76.8, 7003.0], [76.9, 7003.0], [77.0, 7004.0], [77.1, 7015.0], [77.2, 7020.0], [77.3, 7023.0], [77.4, 7025.0], [77.5, 7031.0], [77.6, 7036.0], [77.7, 7037.0], [77.8, 7050.0], [77.9, 7053.0], [78.0, 7053.0], [78.1, 7055.0], [78.2, 7056.0], [78.3, 7058.0], [78.4, 7062.0], [78.5, 7062.0], [78.6, 7063.0], [78.7, 7066.0], [78.8, 7069.0], [78.9, 7079.0], [79.0, 7080.0], [79.1, 7080.0], [79.2, 7086.0], [79.3, 7086.0], [79.4, 7090.0], [79.5, 7093.0], [79.6, 7094.0], [79.7, 7095.0], [79.8, 7097.0], [79.9, 7097.0], [80.0, 7110.0], [80.1, 7113.0], [80.2, 7120.0], [80.3, 7124.0], [80.4, 7124.0], [80.5, 7128.0], [80.6, 7129.0], [80.7, 7129.0], [80.8, 7135.0], [80.9, 7137.0], [81.0, 7140.0], [81.1, 7141.0], [81.2, 7154.0], [81.3, 7158.0], [81.4, 7159.0], [81.5, 7161.0], [81.6, 7163.0], [81.7, 7163.0], [81.8, 7168.0], [81.9, 7171.0], [82.0, 7178.0], [82.1, 7178.0], [82.2, 7188.0], [82.3, 7190.0], [82.4, 7190.0], [82.5, 7211.0], [82.6, 7211.0], [82.7, 7213.0], [82.8, 7215.0], [82.9, 7216.0], [83.0, 7217.0], [83.1, 7225.0], [83.2, 7228.0], [83.3, 7228.0], [83.4, 7229.0], [83.5, 7230.0], [83.6, 7230.0], [83.7, 7232.0], [83.8, 7233.0], [83.9, 7234.0], [84.0, 7235.0], [84.1, 7237.0], [84.2, 7240.0], [84.3, 7241.0], [84.4, 7242.0], [84.5, 7243.0], [84.6, 7253.0], [84.7, 7256.0], [84.8, 7262.0], [84.9, 7276.0], [85.0, 7287.0], [85.1, 7287.0], [85.2, 7296.0], [85.3, 7297.0], [85.4, 7300.0], [85.5, 7306.0], [85.6, 7310.0], [85.7, 7311.0], [85.8, 7314.0], [85.9, 7318.0], [86.0, 7322.0], [86.1, 7325.0], [86.2, 7325.0], [86.3, 7330.0], [86.4, 7332.0], [86.5, 7340.0], [86.6, 7345.0], [86.7, 7346.0], [86.8, 7358.0], [86.9, 7358.0], [87.0, 7360.0], [87.1, 7361.0], [87.2, 7366.0], [87.3, 7373.0], [87.4, 7374.0], [87.5, 7375.0], [87.6, 7375.0], [87.7, 7379.0], [87.8, 7381.0], [87.9, 7386.0], [88.0, 7387.0], [88.1, 7389.0], [88.2, 7393.0], [88.3, 7398.0], [88.4, 7402.0], [88.5, 7402.0], [88.6, 7407.0], [88.7, 7411.0], [88.8, 7415.0], [88.9, 7419.0], [89.0, 7421.0], [89.1, 7426.0], [89.2, 7432.0], [89.3, 7437.0], [89.4, 7440.0], [89.5, 7445.0], [89.6, 7448.0], [89.7, 7449.0], [89.8, 7454.0], [89.9, 7459.0], [90.0, 7465.0], [90.1, 7470.0], [90.2, 7471.0], [90.3, 7472.0], [90.4, 7476.0], [90.5, 7476.0], [90.6, 7480.0], [90.7, 7480.0], [90.8, 7484.0], [90.9, 7486.0], [91.0, 7488.0], [91.1, 7494.0], [91.2, 7495.0], [91.3, 7497.0], [91.4, 7500.0], [91.5, 7505.0], [91.6, 7506.0], [91.7, 7506.0], [91.8, 7509.0], [91.9, 7514.0], [92.0, 7515.0], [92.1, 7516.0], [92.2, 7517.0], [92.3, 7541.0], [92.4, 7545.0], [92.5, 7548.0], [92.6, 7560.0], [92.7, 7560.0], [92.8, 7577.0], [92.9, 7577.0], [93.0, 7578.0], [93.1, 7589.0], [93.2, 7591.0], [93.3, 7595.0], [93.4, 7600.0], [93.5, 7605.0], [93.6, 7605.0], [93.7, 7614.0], [93.8, 7615.0], [93.9, 7624.0], [94.0, 7638.0], [94.1, 7640.0], [94.2, 7642.0], [94.3, 7643.0], [94.4, 7652.0], [94.5, 7662.0], [94.6, 7663.0], [94.7, 7664.0], [94.8, 7665.0], [94.9, 7676.0], [95.0, 7694.0], [95.1, 7698.0], [95.2, 7699.0], [95.3, 7714.0], [95.4, 7721.0], [95.5, 7733.0], [95.6, 7743.0], [95.7, 7751.0], [95.8, 7753.0], [95.9, 7755.0], [96.0, 7763.0], [96.1, 7770.0], [96.2, 7772.0], [96.3, 7779.0], [96.4, 7779.0], [96.5, 7784.0], [96.6, 7789.0], [96.7, 7797.0], [96.8, 7808.0], [96.9, 7808.0], [97.0, 7810.0], [97.1, 7812.0], [97.2, 7815.0], [97.3, 7816.0], [97.4, 7825.0], [97.5, 7827.0], [97.6, 7837.0], [97.7, 7859.0], [97.8, 7863.0], [97.9, 7869.0], [98.0, 7870.0], [98.1, 7879.0], [98.2, 7887.0], [98.3, 7899.0], [98.4, 7904.0], [98.5, 7910.0], [98.6, 7911.0], [98.7, 7915.0], [98.8, 7946.0], [98.9, 7949.0], [99.0, 7963.0], [99.1, 7981.0], [99.2, 7981.0], [99.3, 7986.0], [99.4, 8022.0], [99.5, 8027.0], [99.6, 8041.0], [99.7, 8043.0], [99.8, 8051.0], [99.9, 8098.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 60.0, "series": [{"data": [[600.0, 18.0], [700.0, 9.0], [800.0, 17.0], [900.0, 19.0], [1000.0, 12.0], [1100.0, 11.0], [1200.0, 10.0], [1300.0, 13.0], [1400.0, 9.0], [1500.0, 22.0], [1600.0, 14.0], [1700.0, 14.0], [1800.0, 15.0], [1900.0, 9.0], [2000.0, 12.0], [2100.0, 27.0], [2200.0, 22.0], [2300.0, 43.0], [2400.0, 34.0], [2500.0, 60.0], [2600.0, 45.0], [2700.0, 52.0], [2800.0, 41.0], [2900.0, 13.0], [3000.0, 7.0], [3100.0, 4.0], [3300.0, 1.0], [3200.0, 2.0], [3400.0, 2.0], [3500.0, 3.0], [4400.0, 2.0], [4500.0, 2.0], [4700.0, 1.0], [6000.0, 7.0], [6100.0, 7.0], [6200.0, 8.0], [6300.0, 16.0], [6400.0, 9.0], [6500.0, 18.0], [6600.0, 15.0], [6700.0, 25.0], [6800.0, 16.0], [6900.0, 33.0], [7000.0, 33.0], [7100.0, 25.0], [7200.0, 29.0], [7300.0, 30.0], [7400.0, 30.0], [7600.0, 19.0], [7500.0, 20.0], [7700.0, 15.0], [7800.0, 16.0], [7900.0, 10.0], [8000.0, 6.0], [100.0, 6.0], [200.0, 7.0], [300.0, 12.0], [400.0, 9.0], [500.0, 14.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 34.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 834.0, "series": [{"data": [[0.0, 34.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 132.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 834.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 175.0085959885388, "minX": 1.5910101E12, "maxY": 465.62058371735793, "series": [{"data": [[1.59101016E12, 175.0085959885388], [1.5910101E12, 465.62058371735793]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59101016E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1281.5, "minX": 1.0, "maxY": 8098.0, "series": [{"data": [[2.0, 8051.0], [3.0, 8041.0], [4.0, 8043.0], [5.0, 7981.0], [6.0, 7981.0], [7.0, 8022.0], [8.0, 7869.0], [9.0, 7887.0], [10.0, 7986.0], [11.0, 7963.0], [12.0, 7879.0], [13.0, 7870.0], [14.0, 7825.0], [15.0, 7946.0], [16.0, 7779.0], [17.0, 7721.0], [18.0, 7663.0], [19.0, 7714.0], [20.0, 7899.0], [21.0, 7578.0], [22.0, 7863.0], [23.0, 7624.0], [24.0, 7837.0], [25.0, 7808.0], [26.0, 7808.0], [27.0, 7827.0], [28.0, 7812.0], [29.0, 7784.0], [30.0, 7694.0], [31.0, 7810.0], [33.0, 7480.0], [32.0, 7517.0], [35.0, 7797.0], [34.0, 7560.0], [37.0, 7506.0], [36.0, 7665.0], [39.0, 7605.0], [38.0, 7589.0], [41.0, 7472.0], [40.0, 7577.0], [43.0, 7605.0], [42.0, 7595.0], [45.0, 7407.0], [44.0, 7228.0], [47.0, 7432.0], [46.0, 7415.0], [49.0, 7476.0], [48.0, 7358.0], [51.0, 7509.0], [50.0, 7340.0], [53.0, 7437.0], [52.0, 7426.0], [55.0, 7300.0], [54.0, 7325.0], [57.0, 7242.0], [56.0, 7393.0], [59.0, 7398.0], [58.0, 7230.0], [61.0, 7217.0], [60.0, 7211.0], [63.0, 7346.0], [62.0, 7375.0], [67.0, 8027.0], [66.0, 7911.0], [65.0, 7159.0], [64.0, 7229.0], [71.0, 7188.0], [70.0, 7171.0], [69.0, 7128.0], [68.0, 7213.0], [75.0, 7069.0], [74.0, 7949.0], [73.0, 7161.0], [72.0, 7163.0], [79.0, 7080.0], [78.0, 7904.0], [77.0, 7915.0], [76.0, 7910.0], [83.0, 7763.0], [82.0, 7062.0], [81.0, 7055.0], [80.0, 7037.0], [86.0, 7772.0], [85.0, 7859.0], [84.0, 7031.0], [91.0, 7755.0], [90.0, 7751.0], [89.0, 7643.0], [88.0, 7802.0], [95.0, 7816.0], [94.0, 7743.0], [93.0, 7753.0], [92.0, 6849.0], [99.0, 7708.5], [97.0, 7770.0], [96.0, 7733.0], [103.0, 7560.0], [102.0, 7640.0], [101.0, 7698.0], [100.0, 7699.0], [107.0, 7614.0], [106.0, 7615.0], [105.0, 7642.0], [104.0, 7662.0], [110.0, 3834.0], [111.0, 7545.0], [109.0, 7445.0], [108.0, 7577.0], [115.0, 7506.0], [114.0, 7541.0], [113.0, 7515.0], [112.0, 7440.0], [119.0, 7459.0], [118.0, 7495.0], [117.0, 7514.0], [116.0, 7516.0], [123.0, 7480.0], [122.0, 7381.0], [121.0, 7448.0], [120.0, 7486.0], [124.0, 3734.5], [127.0, 7358.0], [126.0, 7402.0], [125.0, 7240.0], [133.0, 1955.0], [132.0, 3706.0], [134.0, 2511.3333333333335], [135.0, 7233.0], [131.0, 7120.0], [130.0, 7232.0], [129.0, 7330.0], [128.0, 7389.0], [143.0, 7093.0], [142.0, 7056.0], [141.0, 7058.0], [140.0, 6994.0], [139.0, 7110.0], [138.0, 7063.0], [137.0, 7080.0], [136.0, 7215.0], [146.0, 3702.0], [151.0, 6982.0], [150.0, 7020.0], [149.0, 6972.0], [148.0, 7023.0], [147.0, 7066.0], [145.0, 7025.0], [144.0, 7053.0], [153.0, 2553.6666666666665], [155.0, 3607.5], [157.0, 3624.5], [159.0, 6917.0], [158.0, 6848.0], [156.0, 6956.0], [154.0, 6927.0], [152.0, 7050.0], [163.0, 3607.5], [167.0, 6817.0], [166.0, 6916.0], [165.0, 6898.0], [164.0, 6919.0], [162.0, 6914.0], [161.0, 6871.0], [160.0, 6886.0], [171.0, 2501.6666666666665], [175.0, 6733.0], [174.0, 6790.0], [173.0, 6718.0], [172.0, 6772.0], [170.0, 6764.0], [169.0, 6790.0], [168.0, 6896.0], [180.0, 1662.4], [179.0, 1656.6], [177.0, 2504.0], [181.0, 3564.0], [178.0, 3612.5], [183.0, 3582.0], [182.0, 3555.0], [176.0, 6820.0], [191.0, 7470.0], [190.0, 7500.0], [189.0, 6640.0], [188.0, 7488.0], [187.0, 7476.0], [186.0, 7505.0], [185.0, 6641.0], [184.0, 7591.0], [199.0, 7375.0], [198.0, 7296.0], [197.0, 7386.0], [196.0, 7379.0], [195.0, 6544.0], [194.0, 7484.0], [193.0, 7421.0], [192.0, 7454.0], [202.0, 3858.5], [207.0, 2742.0], [206.0, 2745.3333333333335], [205.0, 7373.0], [204.0, 7325.0], [203.0, 7230.0], [201.0, 7332.0], [200.0, 6478.0], [211.0, 2237.5], [212.0, 2791.0], [214.0, 2224.75], [213.0, 2799.6666666666665], [215.0, 7287.0], [210.0, 7235.0], [209.0, 7297.0], [208.0, 7311.0], [218.0, 2227.25], [220.0, 2778.6666666666665], [222.0, 3920.0], [223.0, 2804.6666666666665], [221.0, 7216.0], [219.0, 7140.0], [217.0, 7168.0], [216.0, 7241.0], [224.0, 2818.6666666666665], [225.0, 3848.0], [227.0, 3873.0], [229.0, 3829.0], [228.0, 3861.5], [230.0, 2255.75], [231.0, 2855.3333333333335], [226.0, 7090.0], [233.0, 1953.6], [232.0, 2804.3333333333335], [234.0, 2843.6666666666665], [235.0, 3871.0], [239.0, 6991.0], [238.0, 6885.0], [237.0, 6904.0], [236.0, 6904.0], [247.0, 6688.0], [246.0, 7652.0], [245.0, 7664.0], [244.0, 6729.0], [243.0, 7676.0], [242.0, 6943.0], [241.0, 6993.0], [240.0, 6817.0], [255.0, 3832.5], [254.0, 7600.0], [253.0, 6667.0], [252.0, 6689.0], [251.0, 6792.0], [250.0, 6926.0], [249.0, 6926.0], [248.0, 6875.0], [270.0, 7419.0], [256.0, 2785.666666666667], [263.0, 4161.0], [264.0, 1696.5714285714287], [265.0, 3717.5], [267.0, 7494.0], [266.0, 7497.0], [262.0, 3686.5], [261.0, 3700.5], [260.0, 6715.0], [268.0, 4154.0], [259.0, 6787.0], [258.0, 6748.0], [257.0, 6835.0], [269.0, 6636.0], [271.0, 2018.0], [286.0, 3149.6666666666665], [274.0, 2219.6], [272.0, 2051.2], [275.0, 2319.0], [273.0, 2544.0], [279.0, 4117.0], [278.0, 7387.0], [277.0, 6441.0], [276.0, 7402.0], [281.0, 3694.5], [283.0, 7318.0], [282.0, 6424.0], [287.0, 7361.0], [280.0, 6419.0], [285.0, 4109.0], [284.0, 4053.0], [301.0, 6965.0], [288.0, 4185.0], [295.0, 7154.0], [293.0, 3044.6666666666665], [292.0, 7097.0], [294.0, 4086.5], [296.0, 4090.5], [297.0, 7086.0], [303.0, 7036.0], [302.0, 7095.0], [300.0, 7237.0], [291.0, 7178.0], [290.0, 7345.0], [289.0, 7190.0], [299.0, 7228.0], [298.0, 7124.0], [318.0, 6762.0], [305.0, 4073.0], [304.0, 7003.0], [306.0, 6977.0], [311.0, 6969.0], [310.0, 6975.0], [309.0, 6966.0], [308.0, 6969.0], [307.0, 3977.5], [314.0, 3999.5], [317.0, 6737.0], [316.0, 6924.0], [315.0, 6945.0], [313.0, 6967.0], [312.0, 6959.0], [321.0, 3940.5], [320.0, 3938.0], [323.0, 3935.0], [322.0, 6661.0], [332.0, 6589.0], [324.0, 2995.333333333333], [325.0, 3982.5], [326.0, 3924.0], [327.0, 6593.0], [328.0, 2496.25], [329.0, 6738.0], [331.0, 6571.0], [330.0, 6694.0], [335.0, 6664.0], [334.0, 6573.0], [333.0, 6672.0], [350.0, 6371.0], [344.0, 3913.0], [343.0, 3883.5], [337.0, 6534.0], [336.0, 6653.0], [339.0, 6556.0], [338.0, 6628.0], [342.0, 6605.0], [341.0, 6516.0], [340.0, 6541.0], [347.0, 2965.333333333333], [346.0, 2967.0], [351.0, 6350.0], [349.0, 6419.0], [348.0, 6565.0], [345.0, 6521.0], [366.0, 3800.0], [353.0, 3773.5], [352.0, 6368.0], [355.0, 6328.0], [354.0, 6359.0], [367.0, 1281.5], [365.0, 6335.0], [364.0, 6332.0], [363.0, 6310.0], [362.0, 6313.0], [361.0, 6322.5], [359.0, 6302.0], [358.0, 6344.0], [357.0, 6322.0], [356.0, 6332.0], [380.0, 3729.0], [369.0, 2261.8], [368.0, 4612.0], [375.0, 6162.0], [374.0, 6135.0], [373.0, 6241.0], [372.0, 6185.0], [370.0, 3738.0], [371.0, 6223.0], [383.0, 2895.333333333333], [377.0, 6234.0], [376.0, 6155.0], [382.0, 3680.0], [381.0, 3719.0], [379.0, 6184.0], [378.0, 6117.0], [398.0, 2464.0], [386.0, 2893.333333333333], [385.0, 6012.0], [384.0, 6040.0], [387.0, 6013.0], [391.0, 4479.0], [390.0, 4548.0], [389.0, 4563.0], [388.0, 4700.0], [399.0, 2313.0], [397.0, 2555.0], [396.0, 3415.0], [395.0, 2524.0], [394.0, 2324.0], [393.0, 2353.0], [392.0, 4480.0], [414.0, 2560.0], [407.0, 1453.0], [401.0, 2325.5], [403.0, 2319.0], [402.0, 2683.0], [406.0, 3511.0], [405.0, 2290.0], [404.0, 2318.0], [415.0, 3147.0], [413.0, 2409.0], [412.0, 2294.0], [411.0, 2731.0], [410.0, 3188.0], [409.0, 2283.0], [408.0, 2412.5], [419.0, 2304.5], [420.0, 1941.0], [421.0, 1967.5], [423.0, 1409.6666666666667], [418.0, 2267.0], [417.0, 2252.0], [416.0, 2435.0], [424.0, 2394.6666666666665], [422.0, 1927.5], [425.0, 2039.5], [427.0, 2667.0], [426.0, 2461.0], [428.0, 2017.5], [429.0, 2839.0], [431.0, 2532.0], [430.0, 3156.0], [447.0, 1768.5], [434.0, 1692.3333333333333], [439.0, 2349.0], [433.0, 2544.0], [432.0, 2475.0], [438.0, 3324.0], [437.0, 3513.0], [436.0, 2526.0], [445.0, 1809.5], [446.0, 2124.0], [444.0, 2638.0], [435.0, 2541.0], [443.0, 2600.0], [442.0, 2648.0], [441.0, 2343.0], [440.0, 2299.0], [462.0, 1761.6666666666665], [450.0, 2062.5], [448.0, 2008.5], [449.0, 2030.0], [456.0, 1787.5], [455.0, 1896.0], [454.0, 2439.0], [453.0, 2492.0], [452.0, 2670.0], [460.0, 1727.0], [451.0, 2523.0], [461.0, 1752.6666666666667], [463.0, 1965.0], [459.0, 2087.0], [458.0, 2183.0], [457.0, 2206.0], [464.0, 1900.5], [470.0, 2234.3333333333335], [471.0, 2536.0], [469.0, 2003.3333333333333], [468.0, 1835.6666666666667], [466.0, 1789.75], [465.0, 2283.0], [467.0, 2542.0], [479.0, 1906.5], [473.0, 2438.0], [472.0, 2341.0], [475.0, 2613.0], [474.0, 2333.0], [478.0, 1888.6666666666667], [477.0, 2395.0], [476.0, 2504.0], [492.0, 2217.0], [480.0, 2162.0], [481.0, 2581.0], [483.0, 2406.0], [482.0, 2527.0], [486.0, 2015.0], [485.0, 2368.0], [484.0, 2379.0], [487.0, 2188.5], [488.0, 2139.0], [491.0, 2284.5], [490.0, 2726.0], [489.0, 2606.0], [493.0, 2043.5], [495.0, 2417.0], [494.0, 2539.0], [511.0, 2399.0], [497.0, 2178.5], [502.0, 2162.5], [501.0, 2428.0], [500.0, 2469.5], [504.0, 2055.6666666666665], [503.0, 2026.0], [496.0, 2733.0], [505.0, 2196.0], [507.0, 1854.75], [506.0, 2119.5], [508.0, 2197.75], [498.0, 2716.0], [510.0, 2737.0], [509.0, 2308.0], [538.0, 2332.0], [512.0, 2304.0], [514.0, 2195.0], [513.0, 2679.0], [515.0, 2595.0], [517.0, 2522.0], [516.0, 2509.0], [519.0, 2862.0], [518.0, 2457.0], [537.0, 3076.0], [536.0, 2861.0], [526.0, 2301.0], [525.0, 2922.0], [524.0, 2950.0], [523.0, 2470.0], [522.0, 2847.0], [521.0, 2601.0], [520.0, 2614.0], [527.0, 2249.5], [543.0, 2533.5], [529.0, 2781.0], [528.0, 2363.0], [531.0, 2539.0], [530.0, 2530.0], [533.0, 2614.0], [532.0, 2889.0], [535.0, 2846.0], [534.0, 2398.0], [542.0, 2900.0], [541.0, 2507.0], [540.0, 2617.0], [539.0, 2607.0], [547.0, 2111.3333333333335], [568.0, 2284.6666666666665], [558.0, 2453.5], [551.0, 2817.0], [550.0, 2565.0], [549.0, 3016.0], [548.0, 3050.0], [559.0, 2661.0], [544.0, 2542.0], [546.0, 2707.0], [545.0, 2853.0], [552.0, 2378.5], [553.0, 2823.0], [555.0, 3005.0], [554.0, 2878.0], [557.0, 2984.0], [556.0, 2803.0], [562.0, 2501.0], [564.0, 2238.0], [563.0, 2879.0], [565.0, 2995.0], [566.0, 2233.25], [567.0, 2204.0], [575.0, 2920.0], [561.0, 2782.0], [560.0, 2706.0], [574.0, 2851.0], [572.0, 2556.0], [571.0, 2944.0], [570.0, 2930.0], [603.0, 2854.0], [607.0, 2808.0], [580.0, 2421.0], [589.0, 2408.5], [588.0, 2790.0], [587.0, 2805.0], [586.0, 2961.0], [585.0, 3013.0], [584.0, 2927.0], [591.0, 2793.0], [577.0, 2675.0], [579.0, 2851.0], [578.0, 2665.0], [590.0, 2839.0], [593.0, 2256.0], [592.0, 2806.0], [594.0, 2400.0], [596.0, 2500.5], [595.0, 2871.0], [597.0, 2327.6666666666665], [599.0, 2830.0], [598.0, 2723.0], [606.0, 2873.0], [605.0, 2780.0], [604.0, 2795.0], [602.0, 2810.0], [601.0, 2849.0], [600.0, 2852.0], [583.0, 2961.0], [582.0, 2885.0], [581.0, 3003.0], [632.0, 2378.0], [611.0, 2430.5], [609.0, 2499.5], [608.0, 2810.0], [610.0, 2854.0], [612.0, 2453.5], [613.0, 2768.0], [615.0, 2760.0], [614.0, 2799.0], [617.0, 2433.0], [616.0, 2758.0], [618.0, 2779.0], [620.0, 2792.0], [619.0, 2744.0], [622.0, 2778.0], [621.0, 2764.0], [623.0, 2746.0], [629.0, 2282.0], [628.0, 2334.0], [631.0, 2334.3333333333335], [630.0, 2425.5], [633.0, 2520.0], [634.0, 2358.6666666666665], [635.0, 2509.5], [637.0, 2486.0], [639.0, 2658.0], [625.0, 2741.0], [624.0, 2719.0], [627.0, 2681.0], [626.0, 2729.0], [638.0, 2727.0], [636.0, 2483.0], [669.0, 2431.0], [642.0, 2432.0], [645.0, 2219.0], [644.0, 2607.0], [643.0, 2670.0], [664.0, 2633.0], [647.0, 2720.3333333333335], [650.0, 2421.5], [649.0, 2778.0], [648.0, 2630.0], [651.0, 2767.0], [656.0, 2375.2], [657.0, 2741.0], [659.0, 2670.0], [658.0, 2592.0], [661.0, 2569.0], [660.0, 2542.0], [663.0, 2647.0], [662.0, 2585.0], [671.0, 2512.0], [670.0, 2514.0], [655.0, 2456.0], [641.0, 2677.0], [640.0, 2707.0], [654.0, 2519.0], [653.0, 2444.0], [652.0, 2630.0], [665.0, 2426.3333333333335], [666.0, 2453.3333333333335], [667.0, 2382.0], [668.0, 2601.0], [684.0, 2407.0], [674.0, 2399.0], [675.0, 2581.0], [677.0, 2624.0], [676.0, 2532.0], [679.0, 2497.5], [689.0, 2551.0], [688.0, 2470.0], [691.0, 2502.0], [690.0, 2547.0], [678.0, 2473.0], [673.0, 2519.5], [672.0, 2445.0], [683.0, 2440.25], [682.0, 2419.75], [681.0, 2430.0], [685.0, 2458.5], [686.0, 2483.0], [687.0, 2471.0], [680.0, 2494.0], [1.0, 8098.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[364.19699999999966, 3986.8959999999997]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 691.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1169.15, "minX": 1.5910101E12, "maxY": 2799.3, "series": [{"data": [[1.59101016E12, 1169.15], [1.5910101E12, 2180.85]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.59101016E12, 1500.7], [1.5910101E12, 2799.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59101016E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2260.694316436252, "minX": 1.5910101E12, "maxY": 7206.830945558733, "series": [{"data": [[1.59101016E12, 7206.830945558733], [1.5910101E12, 2260.694316436252]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59101016E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2260.614439324114, "minX": 1.5910101E12, "maxY": 7206.759312320917, "series": [{"data": [[1.59101016E12, 7206.759312320917], [1.5910101E12, 2260.614439324114]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59101016E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.2836676217765044, "minX": 1.5910101E12, "maxY": 6.480798771121353, "series": [{"data": [[1.59101016E12, 1.2836676217765044], [1.5910101E12, 6.480798771121353]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59101016E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 120.0, "minX": 1.5910101E12, "maxY": 8098.0, "series": [{"data": [[1.59101016E12, 8098.0], [1.5910101E12, 6371.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.59101016E12, 6424.299999833107], [1.5910101E12, 195.7359996891022]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.59101016E12, 6424.930000066757], [1.5910101E12, 198.27400031089783]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.59101016E12, 6424.6499999165535], [1.5910101E12, 196.96999961137772]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.59101016E12, 6419.0], [1.5910101E12, 120.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.59101016E12, 7211.0], [1.5910101E12, 2363.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59101016E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 637.5, "minX": 5.0, "maxY": 7614.5, "series": [{"data": [[134.0, 4981.0], [71.0, 2464.0], [38.0, 6245.5], [5.0, 4548.0], [90.0, 7614.5], [95.0, 1374.0], [93.0, 2082.0], [106.0, 637.5], [109.0, 2659.0], [125.0, 7243.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 134.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 637.5, "minX": 5.0, "maxY": 7614.5, "series": [{"data": [[134.0, 4981.0], [71.0, 2464.0], [38.0, 6245.5], [5.0, 4548.0], [90.0, 7614.5], [95.0, 1374.0], [93.0, 2082.0], [106.0, 637.5], [109.0, 2658.0], [125.0, 7243.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 134.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.5910101E12, "maxY": 16.666666666666668, "series": [{"data": [[1.5910101E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.5910101E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.816666666666666, "minX": 1.5910101E12, "maxY": 10.85, "series": [{"data": [[1.59101016E12, 5.816666666666666], [1.5910101E12, 10.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.59101016E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.816666666666666, "minX": 1.5910101E12, "maxY": 10.85, "series": [{"data": [[1.59101016E12, 5.816666666666666], [1.5910101E12, 10.85]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59101016E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.816666666666666, "minX": 1.5910101E12, "maxY": 10.85, "series": [{"data": [[1.59101016E12, 5.816666666666666], [1.5910101E12, 10.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.59101016E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

